import * as fs from 'fs';

function* generateIcons(icons: string[]) {
    yield `// This file is generated by icons.js`;
    yield `import type {GrNodeDefDto} from '@/api';`;
    yield `import {${icons.join(',')}} from 'lucide-react';`;
    yield `import type {FC} from 'react';`;
    yield ``;
    yield `export type GrNodeDefIcon = GrNodeDefDto['icon'];`;
    yield ``;
    yield `export const GrNodeDefIcons: Record<GrNodeDefIcon, FC<{className?: string}>> = {`;
    yield icons.join(',');
    yield `};`;
}

function* getIconsFromApiTs(filePath: string) {
    // Read the file contents
    const fileContents = fs.readFileSync(filePath, 'utf-8');

    // 1. Find the union type for `icon:` (including all lines that start with `| '...'`)
    //    We look for `icon:` followed by a sequence of lines matching `| 'someString'`.
    const iconTypeBlockRegex = /icon:\s*((?:\|\s*'[^']*'\s*)+)/;
    const blockMatch = fileContents.match(iconTypeBlockRegex);

    if (!blockMatch) {
        throw new Error(`Could not find icon type block in ${filePath}`);
    }

    // 2. Within that block of text, find all occurrences of `'someString'`
    const iconStringsRegex = /'([^']*)'/g;

    let match: RegExpExecArray | null;
    while ((match = iconStringsRegex.exec(blockMatch[1])) !== null) {
        yield match[1];
    }
}

async function main(inputFile: string, outputFile: string) {
    if (!fs.existsSync(inputFile)) {
        throw new Error(`Input file ${inputFile} does not exist.`);
    }

    const icons = Array.from(getIconsFromApiTs(inputFile));
    const output = Array.from(generateIcons(icons));

    fs.writeFileSync(outputFile, output.join('\n'));
}

if (!process.argv[2] || !process.argv[3]) {
    console.error('Usage: node icons.js <inputFile> <outputFile>');
    process.exit(1);
}

main(process.argv[2], process.argv[3]).then(
    () => {
        console.log('done');
    },
    (err) => {
        console.error(err);
        process.exit(1);
    }
);
