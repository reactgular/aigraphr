// This file is auto-generated by @hey-api/openapi-ts

import {createClient, createConfig, type Options} from '@hey-api/client-fetch';
import type {
    ProjectsScaPaginateData,
    ProjectsScaPaginateResponse,
    ProjectsScaCreateData,
    ProjectsScaCreateResponse,
    ProjectsScaRemoveData,
    ProjectsScaRemoveResponse,
    ProjectsScaGetData,
    ProjectsScaGetResponse,
    ProjectsScaUpdateData,
    ProjectsScaUpdateResponse,
    AttributesScaPaginateData,
    AttributesScaPaginateResponse,
    AttributesScaCreateData,
    AttributesScaCreateResponse,
    AttributesScaRemoveData,
    AttributesScaRemoveResponse,
    AttributesScaGetData,
    AttributesScaGetResponse,
    AttributesScaUpdateData,
    AttributesScaUpdateResponse,
    EdgesScaPaginateData,
    EdgesScaPaginateResponse,
    EdgesScaCreateData,
    EdgesScaCreateResponse,
    EdgesScaRemoveData,
    EdgesScaRemoveResponse,
    EdgesScaGetData,
    EdgesScaGetResponse,
    EdgesScaUpdateData,
    EdgesScaUpdateResponse,
    NodesScaPaginateData,
    NodesScaPaginateResponse,
    NodesScaCreateData,
    NodesScaCreateResponse,
    NodesScaRemoveData,
    NodesScaRemoveResponse,
    NodesScaGetData,
    NodesScaGetResponse,
    NodesScaUpdateData,
    NodesScaUpdateResponse,
    WorkspacesScaPaginateData,
    WorkspacesScaPaginateResponse,
    WorkspacesScaCreateData,
    WorkspacesScaCreateResponse,
    WorkspacesScaRemoveData,
    WorkspacesScaRemoveResponse,
    WorkspacesScaGetData,
    WorkspacesScaGetResponse,
    WorkspacesScaUpdateData,
    WorkspacesScaUpdateResponse,
    SettingsGetData,
    SettingsGetResponse,
    SettingsUpdateData,
    SettingsUpdateResponse,
    SettingsReplaceData,
    SettingsReplaceResponse
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Paginate Project
 */
export const projectsScaPaginate = <ThrowOnError extends boolean = false>(
    options?: Options<ProjectsScaPaginateData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        ProjectsScaPaginateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects'
    });
};

/**
 * Create a new Project
 */
export const projectsScaCreate = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsScaCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        ProjectsScaCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/projects'
    });
};

/**
 * Delete a Project by projectId
 */
export const projectsScaRemove = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsScaRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        ProjectsScaRemoveResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects/{projectId}'
    });
};

/**
 * Get Project by projectId
 */
export const projectsScaGet = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsScaGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        ProjectsScaGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects/{projectId}'
    });
};

/**
 * Update a Project by projectId
 */
export const projectsScaUpdate = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsScaUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        ProjectsScaUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/projects/{projectId}'
    });
};

/**
 * Paginate Attribute
 */
export const attributesScaPaginate = <ThrowOnError extends boolean = false>(
    options: Options<AttributesScaPaginateData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        AttributesScaPaginateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/attributes'
    });
};

/**
 * Create a new Attribute
 */
export const attributesScaCreate = <ThrowOnError extends boolean = false>(
    options: Options<AttributesScaCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        AttributesScaCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/attributes'
    });
};

/**
 * Delete a Attribute by attributeId
 */
export const attributesScaRemove = <ThrowOnError extends boolean = false>(
    options: Options<AttributesScaRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        AttributesScaRemoveResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/attributes/{attributeId}'
    });
};

/**
 * Get Attribute by attributeId
 */
export const attributesScaGet = <ThrowOnError extends boolean = false>(
    options: Options<AttributesScaGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        AttributesScaGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/attributes/{attributeId}'
    });
};

/**
 * Update a Attribute by attributeId
 */
export const attributesScaUpdate = <ThrowOnError extends boolean = false>(
    options: Options<AttributesScaUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        AttributesScaUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/attributes/{attributeId}'
    });
};

/**
 * Paginate Edge
 */
export const edgesScaPaginate = <ThrowOnError extends boolean = false>(
    options: Options<EdgesScaPaginateData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        EdgesScaPaginateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/edges'
    });
};

/**
 * Create a new Edge
 */
export const edgesScaCreate = <ThrowOnError extends boolean = false>(
    options: Options<EdgesScaCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        EdgesScaCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/edges'
    });
};

/**
 * Delete a Edge by edgeId
 */
export const edgesScaRemove = <ThrowOnError extends boolean = false>(
    options: Options<EdgesScaRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        EdgesScaRemoveResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/edges/{edgeId}'
    });
};

/**
 * Get Edge by edgeId
 */
export const edgesScaGet = <ThrowOnError extends boolean = false>(
    options: Options<EdgesScaGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        EdgesScaGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/edges/{edgeId}'
    });
};

/**
 * Update a Edge by edgeId
 */
export const edgesScaUpdate = <ThrowOnError extends boolean = false>(
    options: Options<EdgesScaUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        EdgesScaUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/edges/{edgeId}'
    });
};

/**
 * Paginate Node
 */
export const nodesScaPaginate = <ThrowOnError extends boolean = false>(
    options: Options<NodesScaPaginateData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        NodesScaPaginateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/nodes'
    });
};

/**
 * Create a new Node
 */
export const nodesScaCreate = <ThrowOnError extends boolean = false>(
    options: Options<NodesScaCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        NodesScaCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/nodes'
    });
};

/**
 * Delete a Node by nodeId
 */
export const nodesScaRemove = <ThrowOnError extends boolean = false>(
    options: Options<NodesScaRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        NodesScaRemoveResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/nodes/{nodeId}'
    });
};

/**
 * Get Node by nodeId
 */
export const nodesScaGet = <ThrowOnError extends boolean = false>(
    options: Options<NodesScaGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        NodesScaGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/nodes/{nodeId}'
    });
};

/**
 * Update a Node by nodeId
 */
export const nodesScaUpdate = <ThrowOnError extends boolean = false>(
    options: Options<NodesScaUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        NodesScaUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/nodes/{nodeId}'
    });
};

/**
 * Paginate Workspace
 */
export const workspacesScaPaginate = <ThrowOnError extends boolean = false>(
    options: Options<WorkspacesScaPaginateData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        WorkspacesScaPaginateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/workspaces'
    });
};

/**
 * Create a new Workspace
 */
export const workspacesScaCreate = <ThrowOnError extends boolean = false>(
    options: Options<WorkspacesScaCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        WorkspacesScaCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/workspaces'
    });
};

/**
 * Delete a Workspace by workspaceId
 */
export const workspacesScaRemove = <ThrowOnError extends boolean = false>(
    options: Options<WorkspacesScaRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        WorkspacesScaRemoveResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/workspaces/{workspaceId}'
    });
};

/**
 * Get Workspace by workspaceId
 */
export const workspacesScaGet = <ThrowOnError extends boolean = false>(
    options: Options<WorkspacesScaGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        WorkspacesScaGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/workspaces/{workspaceId}'
    });
};

/**
 * Update a Workspace by workspaceId
 */
export const workspacesScaUpdate = <ThrowOnError extends boolean = false>(
    options: Options<WorkspacesScaUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        WorkspacesScaUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/workspaces/{workspaceId}'
    });
};

/**
 * Get App settings
 */
export const settingsGet = <ThrowOnError extends boolean = false>(
    options?: Options<SettingsGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        SettingsGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/app/settings'
    });
};

/**
 * Update App settings
 */
export const settingsUpdate = <ThrowOnError extends boolean = false>(
    options: Options<SettingsUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        SettingsUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/app/settings'
    });
};

/**
 * Replace App settings
 */
export const settingsReplace = <ThrowOnError extends boolean = false>(
    options: Options<SettingsReplaceData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        SettingsReplaceResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/app/settings'
    });
};
