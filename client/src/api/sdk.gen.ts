// This file is auto-generated by @hey-api/openapi-ts

import {createClient, createConfig, type Options} from '@hey-api/client-fetch';
import type {
    AppControllerRemoveData,
    AppControllerRemoveResponse,
    AppControllerGetHelloData,
    AppControllerGetHelloResponse,
    AppControllerPatchData,
    AppControllerPatchResponse,
    AppControllerCreateData,
    AppControllerCreateResponse,
    AppControllerPutData,
    AppControllerPutResponse,
    ProjectsInstancesControllerRemoveAllData,
    ProjectsInstancesControllerIndexData,
    ProjectsInstancesControllerIndexResponse,
    ProjectsInstancesControllerCreateData,
    ProjectsInstancesControllerCreateResponse,
    ProjectsInstancesControllerRemoveData,
    ProjectsInstancesControllerGetData,
    ProjectsInstancesControllerGetResponse,
    ProjectsFilesControllerIndexData,
    ProjectsFilesControllerIndexResponse,
    ProjectsFilesControllerCreateData,
    ProjectsFilesControllerCreateResponse,
    ProjectsFilesControllerGetData,
    ProjectsFilesControllerGetResponse
} from './types.gen';

export const client = createClient(createConfig());

export const appControllerRemove = <ThrowOnError extends boolean = false>(
    options?: Options<AppControllerRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        AppControllerRemoveResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/'
    });
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(
    options?: Options<AppControllerGetHelloData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        AppControllerGetHelloResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/'
    });
};

export const appControllerPatch = <ThrowOnError extends boolean = false>(
    options?: Options<AppControllerPatchData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        AppControllerPatchResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/'
    });
};

export const appControllerCreate = <ThrowOnError extends boolean = false>(
    options?: Options<AppControllerCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        AppControllerCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/'
    });
};

export const appControllerPut = <ThrowOnError extends boolean = false>(
    options?: Options<AppControllerPutData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        AppControllerPutResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/'
    });
};

/**
 * Removes all project instances
 * Close all project files and removes them from memory.
 */
export const projectsInstancesControllerRemoveAll = <
    ThrowOnError extends boolean = false
>(
    options?: Options<ProjectsInstancesControllerRemoveAllData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/projects/instances'
    });
};

/**
 * List all project instances
 */
export const projectsInstancesControllerIndex = <
    ThrowOnError extends boolean = false
>(
    options?: Options<ProjectsInstancesControllerIndexData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        ProjectsInstancesControllerIndexResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects/instances'
    });
};

/**
 * Create a new project instance
 * Opens a project file and loads it into memory as an instance.
 */
export const projectsInstancesControllerCreate = <
    ThrowOnError extends boolean = false
>(
    options?: Options<ProjectsInstancesControllerCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        ProjectsInstancesControllerCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects/instances'
    });
};

/**
 * Removes a project instance
 * Close a project file and removes it from memory.
 */
export const projectsInstancesControllerRemove = <
    ThrowOnError extends boolean = false
>(
    options?: Options<ProjectsInstancesControllerRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/projects/instances/{instanceId}'
    });
};

/**
 * Get project instance by ID
 */
export const projectsInstancesControllerGet = <
    ThrowOnError extends boolean = false
>(
    options?: Options<ProjectsInstancesControllerGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        ProjectsInstancesControllerGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects/instances/{instanceId}'
    });
};

/**
 * List all project files
 */
export const projectsFilesControllerIndex = <
    ThrowOnError extends boolean = false
>(
    options?: Options<ProjectsFilesControllerIndexData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        ProjectsFilesControllerIndexResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects/files'
    });
};

/**
 * Create a new project file.
 * To create a new profile file the server must create an empty instance of the project and load it, but if the profile file already exists. then the server must load the existing instance.
 */
export const projectsFilesControllerCreate = <
    ThrowOnError extends boolean = false
>(
    options?: Options<ProjectsFilesControllerCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        ProjectsFilesControllerCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects/files'
    });
};

/**
 * Get project file by ID
 */
export const projectsFilesControllerGet = <
    ThrowOnError extends boolean = false
>(
    options: Options<ProjectsFilesControllerGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        ProjectsFilesControllerGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects/files/{fileId}'
    });
};
