// This file is auto-generated by @hey-api/openapi-ts

import {createClient, createConfig, type Options} from '@hey-api/client-fetch';
import type {
    ProjectsScaPaginateData,
    ProjectsScaPaginateResponse,
    ProjectsScaCreateData,
    ProjectsScaCreateResponse,
    ProjectsScaRemoveData,
    ProjectsScaRemoveResponse,
    ProjectsScaGetData,
    ProjectsScaGetResponse,
    ProjectsScaUpdateData,
    ProjectsScaUpdateResponse,
    AttributesIndexData,
    AttributesIndexResponse,
    AttributesCreateData,
    AttributesCreateResponse,
    AttributesRemoveData,
    AttributesRemoveResponse,
    AttributesGetData,
    AttributesGetResponse,
    AttributesUpdateData,
    AttributesUpdateResponse,
    EdgesIndexData,
    EdgesIndexResponse,
    EdgesCreateData,
    EdgesCreateResponse,
    EdgesRemoveData,
    EdgesRemoveResponse,
    EdgesGetData,
    EdgesGetResponse,
    EdgesUpdateData,
    EdgesUpdateResponse,
    NodesIndexData,
    NodesIndexResponse,
    NodesCreateData,
    NodesCreateResponse,
    NodesRemoveData,
    NodesRemoveResponse,
    NodesGetData,
    NodesGetResponse,
    NodesUpdateData,
    NodesUpdateResponse,
    WorkspacesIndexData,
    WorkspacesIndexResponse,
    WorkspacesCreateData,
    WorkspacesCreateResponse,
    WorkspacesRemoveData,
    WorkspacesRemoveResponse,
    WorkspacesGetData,
    WorkspacesGetResponse,
    WorkspacesUpdateData,
    WorkspacesUpdateResponse,
    SettingsGetData,
    SettingsGetResponse,
    SettingsUpdateData,
    SettingsUpdateResponse,
    SettingsReplaceData,
    SettingsReplaceResponse
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Paginate Project
 */
export const projectsScaPaginate = <ThrowOnError extends boolean = false>(
    options?: Options<ProjectsScaPaginateData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        ProjectsScaPaginateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects'
    });
};

/**
 * Create a new Project
 */
export const projectsScaCreate = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsScaCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        ProjectsScaCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/projects'
    });
};

/**
 * Delete a Project by projectId
 */
export const projectsScaRemove = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsScaRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        ProjectsScaRemoveResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects/{projectId}'
    });
};

/**
 * Get Project by projectId
 */
export const projectsScaGet = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsScaGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        ProjectsScaGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/projects/{projectId}'
    });
};

/**
 * Update a Project by projectId
 */
export const projectsScaUpdate = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsScaUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        ProjectsScaUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/projects/{projectId}'
    });
};

/**
 * Paginate Attribute
 */
export const attributesIndex = <ThrowOnError extends boolean = false>(
    options?: Options<AttributesIndexData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        AttributesIndexResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/attributes'
    });
};

/**
 * Create a new Attribute
 */
export const attributesCreate = <ThrowOnError extends boolean = false>(
    options: Options<AttributesCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        AttributesCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/attributes'
    });
};

/**
 * Delete a Attribute by id
 */
export const attributesRemove = <ThrowOnError extends boolean = false>(
    options: Options<AttributesRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        AttributesRemoveResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/attributes/{id}'
    });
};

/**
 * Get Attribute by id
 */
export const attributesGet = <ThrowOnError extends boolean = false>(
    options: Options<AttributesGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        AttributesGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/attributes/{id}'
    });
};

/**
 * Update a Attribute by id
 */
export const attributesUpdate = <ThrowOnError extends boolean = false>(
    options: Options<AttributesUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        AttributesUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/attributes/{id}'
    });
};

/**
 * Paginate Edge
 */
export const edgesIndex = <ThrowOnError extends boolean = false>(
    options?: Options<EdgesIndexData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        EdgesIndexResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/edges'
    });
};

/**
 * Create a new Edge
 */
export const edgesCreate = <ThrowOnError extends boolean = false>(
    options: Options<EdgesCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        EdgesCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/edges'
    });
};

/**
 * Delete a Edge by id
 */
export const edgesRemove = <ThrowOnError extends boolean = false>(
    options: Options<EdgesRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        EdgesRemoveResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/edges/{id}'
    });
};

/**
 * Get Edge by id
 */
export const edgesGet = <ThrowOnError extends boolean = false>(
    options: Options<EdgesGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        EdgesGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/edges/{id}'
    });
};

/**
 * Update a Edge by id
 */
export const edgesUpdate = <ThrowOnError extends boolean = false>(
    options: Options<EdgesUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        EdgesUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/edges/{id}'
    });
};

/**
 * Paginate Node
 */
export const nodesIndex = <ThrowOnError extends boolean = false>(
    options?: Options<NodesIndexData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        NodesIndexResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/nodes'
    });
};

/**
 * Create a new Node
 */
export const nodesCreate = <ThrowOnError extends boolean = false>(
    options: Options<NodesCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        NodesCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/nodes'
    });
};

/**
 * Delete a Node by id
 */
export const nodesRemove = <ThrowOnError extends boolean = false>(
    options: Options<NodesRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        NodesRemoveResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/nodes/{id}'
    });
};

/**
 * Get Node by id
 */
export const nodesGet = <ThrowOnError extends boolean = false>(
    options: Options<NodesGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        NodesGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/nodes/{id}'
    });
};

/**
 * Update a Node by id
 */
export const nodesUpdate = <ThrowOnError extends boolean = false>(
    options: Options<NodesUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        NodesUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/nodes/{id}'
    });
};

/**
 * Paginate Workspace
 */
export const workspacesIndex = <ThrowOnError extends boolean = false>(
    options?: Options<WorkspacesIndexData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        WorkspacesIndexResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/workspaces'
    });
};

/**
 * Create a new Workspace
 */
export const workspacesCreate = <ThrowOnError extends boolean = false>(
    options: Options<WorkspacesCreateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        WorkspacesCreateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/workspaces'
    });
};

/**
 * Delete a Node by id
 */
export const workspacesRemove = <ThrowOnError extends boolean = false>(
    options: Options<WorkspacesRemoveData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<
        WorkspacesRemoveResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/workspaces/{id}'
    });
};

/**
 * Get Workspace by id
 */
export const workspacesGet = <ThrowOnError extends boolean = false>(
    options: Options<WorkspacesGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        WorkspacesGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/editor/{projectId}/workspaces/{id}'
    });
};

/**
 * Update a Workspace by id
 */
export const workspacesUpdate = <ThrowOnError extends boolean = false>(
    options: Options<WorkspacesUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        WorkspacesUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/editor/{projectId}/workspaces/{id}'
    });
};

/**
 * Get App settings
 */
export const settingsGet = <ThrowOnError extends boolean = false>(
    options?: Options<SettingsGetData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        SettingsGetResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        url: '/app/settings'
    });
};

/**
 * Update App settings
 */
export const settingsUpdate = <ThrowOnError extends boolean = false>(
    options: Options<SettingsUpdateData, ThrowOnError>
) => {
    return (options?.client ?? client).patch<
        SettingsUpdateResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/app/settings'
    });
};

/**
 * Replace App settings
 */
export const settingsReplace = <ThrowOnError extends boolean = false>(
    options: Options<SettingsReplaceData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        SettingsReplaceResponse,
        unknown,
        ThrowOnError
    >({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/app/settings'
    });
};
