// This file is auto-generated by @hey-api/openapi-ts

export type ProjectDto = {
    id: number;
    /**
     * The name of the project (alphanumeric)
     */
    name: string;
    /**
     * The open status of the project
     */
    open: boolean;
    test: string;
};

export type ProjectCreateDto = {
    /**
     * The name of the project (alphanumeric)
     */
    name: string;
    /**
     * The ID of the project to clone
     */
    cloneId?: number;
    test: string;
};

export type ProjectUpdateDto = {
    /**
     * The name of the project (alphanumeric)
     */
    name?: string;
    /**
     * The open status of the project
     */
    open?: boolean;
    test?: string;
};

export type AttributeDto = {
    id: number;
    test: string;
};

export type AttributeCreateDto = {
    test: string;
};

export type AttributeUpdateDto = {
    test?: string;
};

export type EdgeDto = {
    id: number;
    test: string;
};

export type EdgeCreateDto = {
    test: string;
};

export type EdgeUpdateDto = {
    test?: string;
};

export type NodeDto = {
    id: number;
    test: string;
};

export type NodeCreateDto = {
    test: string;
};

export type NodeUpdateDto = {
    test?: string;
};

export type WorkspaceDto = {
    id: number;
    /**
     * The name of the project (alphanumeric)
     */
    name: string;
    test: string;
};

export type WorkspaceCreateDto = {
    /**
     * The name of the project (alphanumeric)
     */
    name: string;
    test: string;
};

export type WorkspaceUpdateDto = {
    /**
     * The name of the project (alphanumeric)
     */
    name?: string;
    test?: string;
};

export type SettingDto = {
    test: string;
};

export type ProjectsScaPaginateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/projects';
};

export type ProjectsScaPaginateResponses = {
    /**
     * Return a list of Project
     */
    200: ProjectDto;
};

export type ProjectsScaPaginateResponse =
    ProjectsScaPaginateResponses[keyof ProjectsScaPaginateResponses];

export type ProjectsScaCreateData = {
    body: ProjectCreateDto;
    path?: never;
    query?: never;
    url: '/projects';
};

export type ProjectsScaCreateResponses = {
    /**
     * Return a new Project
     */
    201: ProjectDto;
};

export type ProjectsScaCreateResponse =
    ProjectsScaCreateResponses[keyof ProjectsScaCreateResponses];

export type ProjectsScaRemoveData = {
    body?: never;
    path: {
        projectId: number;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type ProjectsScaRemoveErrors = {
    /**
     * A Project with the specified projectId was not found
     */
    404: unknown;
};

export type ProjectsScaRemoveResponses = {
    /**
     * The Project has been deleted
     */
    204: void;
};

export type ProjectsScaRemoveResponse =
    ProjectsScaRemoveResponses[keyof ProjectsScaRemoveResponses];

export type ProjectsScaGetData = {
    body?: never;
    path: {
        projectId: number;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type ProjectsScaGetErrors = {
    /**
     * A Project with the specified projectId was not found
     */
    404: unknown;
};

export type ProjectsScaGetResponses = {
    /**
     * Return a Project by projectId
     */
    200: ProjectDto;
};

export type ProjectsScaGetResponse =
    ProjectsScaGetResponses[keyof ProjectsScaGetResponses];

export type ProjectsScaUpdateData = {
    body: ProjectUpdateDto;
    path: {
        projectId: number;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type ProjectsScaUpdateErrors = {
    /**
     * A Project with the specified projectId was not found
     */
    404: unknown;
};

export type ProjectsScaUpdateResponses = {
    /**
     * Return a Project by projectId
     */
    200: ProjectDto;
};

export type ProjectsScaUpdateResponse =
    ProjectsScaUpdateResponses[keyof ProjectsScaUpdateResponses];

export type AttributesIndexData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/editor/{projectId}/attributes';
};

export type AttributesIndexResponses = {
    /**
     * Return a list of Attribute
     */
    200: AttributeDto;
};

export type AttributesIndexResponse =
    AttributesIndexResponses[keyof AttributesIndexResponses];

export type AttributesCreateData = {
    body: AttributeCreateDto;
    path?: never;
    query?: never;
    url: '/editor/{projectId}/attributes';
};

export type AttributesCreateResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * Return a new Attribute
     */
    201: AttributeDto;
};

export type AttributesCreateResponse =
    AttributesCreateResponses[keyof AttributesCreateResponses];

export type AttributesRemoveData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/attributes/{id}';
};

export type AttributesRemoveErrors = {
    /**
     * A Attribute with the specified id was not found
     */
    404: unknown;
};

export type AttributesRemoveResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * The Attribute has been deleted
     */
    204: void;
};

export type AttributesRemoveResponse =
    AttributesRemoveResponses[keyof AttributesRemoveResponses];

export type AttributesGetData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/attributes/{id}';
};

export type AttributesGetErrors = {
    /**
     * A Attribute with the specified id was not found
     */
    404: unknown;
};

export type AttributesGetResponses = {
    /**
     * Return a Attribute by id
     */
    200: AttributeDto;
};

export type AttributesGetResponse =
    AttributesGetResponses[keyof AttributesGetResponses];

export type AttributesUpdateData = {
    body: AttributeUpdateDto;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/attributes/{id}';
};

export type AttributesUpdateErrors = {
    /**
     * A Attribute with the specified id was not found
     */
    404: unknown;
};

export type AttributesUpdateResponses = {
    /**
     * Return a Attribute by id
     */
    200: AttributeDto;
};

export type AttributesUpdateResponse =
    AttributesUpdateResponses[keyof AttributesUpdateResponses];

export type EdgesIndexData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/editor/{projectId}/edges';
};

export type EdgesIndexResponses = {
    /**
     * Return a list of Edge
     */
    200: EdgeDto;
};

export type EdgesIndexResponse = EdgesIndexResponses[keyof EdgesIndexResponses];

export type EdgesCreateData = {
    body: EdgeCreateDto;
    path?: never;
    query?: never;
    url: '/editor/{projectId}/edges';
};

export type EdgesCreateResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * Return a new Edge
     */
    201: EdgeDto;
};

export type EdgesCreateResponse =
    EdgesCreateResponses[keyof EdgesCreateResponses];

export type EdgesRemoveData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/edges/{id}';
};

export type EdgesRemoveErrors = {
    /**
     * A Edge with the specified id was not found
     */
    404: unknown;
};

export type EdgesRemoveResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * The Edge has been deleted
     */
    204: void;
};

export type EdgesRemoveResponse =
    EdgesRemoveResponses[keyof EdgesRemoveResponses];

export type EdgesGetData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/edges/{id}';
};

export type EdgesGetErrors = {
    /**
     * A Edge with the specified id was not found
     */
    404: unknown;
};

export type EdgesGetResponses = {
    /**
     * Return a Edge by id
     */
    200: EdgeDto;
};

export type EdgesGetResponse = EdgesGetResponses[keyof EdgesGetResponses];

export type EdgesUpdateData = {
    body: EdgeUpdateDto;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/edges/{id}';
};

export type EdgesUpdateErrors = {
    /**
     * A Edge with the specified id was not found
     */
    404: unknown;
};

export type EdgesUpdateResponses = {
    /**
     * Return a Edge by id
     */
    200: EdgeDto;
};

export type EdgesUpdateResponse =
    EdgesUpdateResponses[keyof EdgesUpdateResponses];

export type NodesIndexData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/editor/{projectId}/nodes';
};

export type NodesIndexResponses = {
    /**
     * Return a list of Node
     */
    200: NodeDto;
};

export type NodesIndexResponse = NodesIndexResponses[keyof NodesIndexResponses];

export type NodesCreateData = {
    body: NodeCreateDto;
    path?: never;
    query?: never;
    url: '/editor/{projectId}/nodes';
};

export type NodesCreateResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * Return a new Node
     */
    201: NodeDto;
};

export type NodesCreateResponse =
    NodesCreateResponses[keyof NodesCreateResponses];

export type NodesRemoveData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/nodes/{id}';
};

export type NodesRemoveErrors = {
    /**
     * A Node with the specified id was not found
     */
    404: unknown;
};

export type NodesRemoveResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * The Node has been deleted
     */
    204: void;
};

export type NodesRemoveResponse =
    NodesRemoveResponses[keyof NodesRemoveResponses];

export type NodesGetData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/nodes/{id}';
};

export type NodesGetErrors = {
    /**
     * A Node with the specified id was not found
     */
    404: unknown;
};

export type NodesGetResponses = {
    /**
     * Return a Node by id
     */
    200: NodeDto;
};

export type NodesGetResponse = NodesGetResponses[keyof NodesGetResponses];

export type NodesUpdateData = {
    body: NodeUpdateDto;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/nodes/{id}';
};

export type NodesUpdateErrors = {
    /**
     * A Node with the specified id was not found
     */
    404: unknown;
};

export type NodesUpdateResponses = {
    /**
     * Return a Node by id
     */
    200: NodeDto;
};

export type NodesUpdateResponse =
    NodesUpdateResponses[keyof NodesUpdateResponses];

export type WorkspacesIndexData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/editor/{projectId}/workspaces';
};

export type WorkspacesIndexResponses = {
    /**
     * Return a list of Workspace
     */
    200: WorkspaceDto;
};

export type WorkspacesIndexResponse =
    WorkspacesIndexResponses[keyof WorkspacesIndexResponses];

export type WorkspacesCreateData = {
    body: WorkspaceCreateDto;
    path?: never;
    query?: never;
    url: '/editor/{projectId}/workspaces';
};

export type WorkspacesCreateResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * Return a new Workspace
     */
    201: WorkspaceDto;
};

export type WorkspacesCreateResponse =
    WorkspacesCreateResponses[keyof WorkspacesCreateResponses];

export type WorkspacesRemoveData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/workspaces/{id}';
};

export type WorkspacesRemoveErrors = {
    /**
     * A Node with the specified id was not found
     */
    404: unknown;
};

export type WorkspacesRemoveResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * The Node has been deleted
     */
    204: void;
};

export type WorkspacesRemoveResponse =
    WorkspacesRemoveResponses[keyof WorkspacesRemoveResponses];

export type WorkspacesGetData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/workspaces/{id}';
};

export type WorkspacesGetErrors = {
    /**
     * A Workspace with the specified id was not found
     */
    404: unknown;
};

export type WorkspacesGetResponses = {
    /**
     * Return a Workspace by id
     */
    200: WorkspaceDto;
};

export type WorkspacesGetResponse =
    WorkspacesGetResponses[keyof WorkspacesGetResponses];

export type WorkspacesUpdateData = {
    body: WorkspaceUpdateDto;
    path: {
        id: number;
    };
    query?: never;
    url: '/editor/{projectId}/workspaces/{id}';
};

export type WorkspacesUpdateErrors = {
    /**
     * A Workspace with the specified id was not found
     */
    404: unknown;
};

export type WorkspacesUpdateResponses = {
    /**
     * Return a Workspace by id
     */
    200: WorkspaceDto;
};

export type WorkspacesUpdateResponse =
    WorkspacesUpdateResponses[keyof WorkspacesUpdateResponses];

export type SettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/app/settings';
};

export type SettingsGetResponses = {
    200: SettingDto;
};

export type SettingsGetResponse =
    SettingsGetResponses[keyof SettingsGetResponses];

export type SettingsUpdateData = {
    body: SettingDto;
    path?: never;
    query?: never;
    url: '/app/settings';
};

export type SettingsUpdateResponses = {
    200: SettingDto;
};

export type SettingsUpdateResponse =
    SettingsUpdateResponses[keyof SettingsUpdateResponses];

export type SettingsReplaceData = {
    body: SettingDto;
    path?: never;
    query?: never;
    url: '/app/settings';
};

export type SettingsReplaceResponses = {
    200: SettingDto;
};

export type SettingsReplaceResponse =
    SettingsReplaceResponses[keyof SettingsReplaceResponses];
