// This file is auto-generated by @hey-api/openapi-ts

export type ProjectCreateDto = {
    /**
     * The name of the project (alphanumeric)
     */
    name: string;
    /**
     * The ID of the project to clone
     */
    cloneId?: number;
};

export type ProjectDto = {
    id: number;
    /**
     * The name of the project (alphanumeric)
     */
    name: string;
    /**
     * The open status of the project
     */
    open: boolean;
};

export type ScaExceptionFilterDto = {
    /**
     * The HTTP status code of the error.
     */
    statusCode: number;
    /**
     * Extra information about the error.
     */
    cause?: {
        [key: string]: unknown;
    };
    /**
     * The error message.
     */
    message: string;
    /**
     * The path of the request that caused the error.
     */
    path: string;
    /**
     * The stack trace of the error.
     */
    stack?: Array<string>;
};

export type ProjectUpdateDto = {
    /**
     * The name of the project (alphanumeric)
     */
    name?: string;
    /**
     * The open status of the project
     */
    open?: boolean;
};

export type ScaFieldValidationDto = {
    /**
     * The name of the field being validated.
     */
    name: string;
    /**
     * The code of the validation.
     */
    code:
        | 'not_found'
        | 'not_unique'
        | 'format'
        | 'bad_value'
        | 'invalid'
        | 'required';
    /**
     * A message providing additional details about the validation.
     */
    message: string;
};

export type ScaValidationResponseDto = {
    /**
     * Whether the validation was successful.
     */
    valid: boolean;
    /**
     * The list of fields that failed validation.
     */
    fields: Array<string>;
    /**
     * Validation results for each field.
     */
    invalidations: {
        [key: string]: ScaFieldValidationDto;
    };
};

export type EdgeCreateDto = {
    test: string;
};

export type EdgeDto = {
    id: number;
    test: string;
};

export type EdgeUpdateDto = {
    test?: string;
};

export type NodeCreateDto = {
    test: string;
};

export type NodeDto = {
    id: number;
    test: string;
};

export type NodeUpdateDto = {
    test?: string;
};

export type WorkspaceCreateDto = {
    /**
     * The name of the project (alphanumeric)
     */
    name: string;
    test: string;
};

export type WorkspaceDto = {
    id: number;
    /**
     * The name of the project (alphanumeric)
     */
    name: string;
    test: string;
};

export type WorkspaceUpdateDto = {
    /**
     * The name of the project (alphanumeric)
     */
    name?: string;
    test?: string;
};

export type SettingDto = {
    test: string;
};

export type ProjectsScaPaginateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/projects';
};

export type ProjectsScaPaginateResponses = {
    /**
     * Return a list of Project
     */
    200: ProjectDto;
};

export type ProjectsScaPaginateResponse =
    ProjectsScaPaginateResponses[keyof ProjectsScaPaginateResponses];

export type ProjectsCreateData = {
    body: ProjectCreateDto;
    path?: never;
    query?: never;
    url: '/api/projects';
};

export type ProjectsCreateErrors = {
    /**
     * TypeORM related errors
     */
    400: ScaExceptionFilterDto;
    /**
     * TypeORM related constraint errors
     */
    409: ScaExceptionFilterDto;
};

export type ProjectsCreateError =
    ProjectsCreateErrors[keyof ProjectsCreateErrors];

export type ProjectsCreateResponses = {
    /**
     * Bug, can't disable 200 response from custom decorator
     */
    200: unknown;
    /**
     * Return a new Project
     */
    201: ProjectDto;
};

export type ProjectsCreateResponse =
    ProjectsCreateResponses[keyof ProjectsCreateResponses];

export type ProjectsRemoveData = {
    body?: never;
    path: {
        /**
         * The ID of a Project
         */
        projectId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}';
};

export type ProjectsRemoveErrors = {
    /**
     * A Project with the specified projectId was not found
     */
    404: unknown;
};

export type ProjectsRemoveResponses = {
    200: {
        [key: string]: unknown;
    };
    /**
     * The Project has been deleted
     */
    204: void;
};

export type ProjectsRemoveResponse =
    ProjectsRemoveResponses[keyof ProjectsRemoveResponses];

export type ProjectsScaGetData = {
    body?: never;
    path: {
        /**
         * The ID of a Project
         */
        projectId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}';
};

export type ProjectsScaGetErrors = {
    /**
     * A Project with the specified projectId was not found
     */
    404: unknown;
};

export type ProjectsScaGetResponses = {
    /**
     * Return a Project by projectId
     */
    200: ProjectDto;
};

export type ProjectsScaGetResponse =
    ProjectsScaGetResponses[keyof ProjectsScaGetResponses];

export type ProjectsUpdateData = {
    body: ProjectUpdateDto;
    path: {
        /**
         * The ID of a Project
         */
        projectId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}';
};

export type ProjectsUpdateErrors = {
    /**
     * TypeORM related errors
     */
    400: ScaExceptionFilterDto;
    /**
     * A Project with the specified projectId was not found
     */
    404: unknown;
    /**
     * TypeORM related constraint errors
     */
    409: ScaExceptionFilterDto;
};

export type ProjectsUpdateError =
    ProjectsUpdateErrors[keyof ProjectsUpdateErrors];

export type ProjectsUpdateResponses = {
    /**
     * Return a Project by projectId
     */
    200: ProjectDto;
};

export type ProjectsUpdateResponse =
    ProjectsUpdateResponses[keyof ProjectsUpdateResponses];

export type ProjectsScaCreateValidateData = {
    body: ProjectCreateDto;
    path?: never;
    query?: never;
    url: '/api/projects/validates';
};

export type ProjectsScaCreateValidateErrors = {
    /**
     * Invalid request body
     */
    400: ScaExceptionFilterDto;
};

export type ProjectsScaCreateValidateError =
    ProjectsScaCreateValidateErrors[keyof ProjectsScaCreateValidateErrors];

export type ProjectsScaCreateValidateResponses = {
    /**
     * Validation results of ProjectCreate
     */
    200: ScaValidationResponseDto;
};

export type ProjectsScaCreateValidateResponse =
    ProjectsScaCreateValidateResponses[keyof ProjectsScaCreateValidateResponses];

export type ProjectsScaUpdateValidateData = {
    body: ProjectUpdateDto;
    path: {
        /**
         * The ID of a ProjectUpdate
         */
        projectId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/validates';
};

export type ProjectsScaUpdateValidateErrors = {
    /**
     * Invalid request body
     */
    400: ScaExceptionFilterDto;
    /**
     * A ProjectUpdate with the specified projectId was not found
     */
    404: unknown;
};

export type ProjectsScaUpdateValidateError =
    ProjectsScaUpdateValidateErrors[keyof ProjectsScaUpdateValidateErrors];

export type ProjectsScaUpdateValidateResponses = {
    /**
     * Validation results of ProjectUpdate
     */
    200: ScaValidationResponseDto;
};

export type ProjectsScaUpdateValidateResponse =
    ProjectsScaUpdateValidateResponses[keyof ProjectsScaUpdateValidateResponses];

export type EdgesScaPaginateData = {
    body?: never;
    path: {
        /**
         * The ID of a project
         */
        projectId: number;
        /**
         * The ID of a workspace
         */
        workspaceId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}/edges';
};

export type EdgesScaPaginateResponses = {
    /**
     * Return a list of Edge
     */
    200: EdgeDto;
};

export type EdgesScaPaginateResponse =
    EdgesScaPaginateResponses[keyof EdgesScaPaginateResponses];

export type EdgesScaCreateData = {
    body: EdgeCreateDto;
    path: {
        /**
         * The ID of a project
         */
        projectId: number;
        /**
         * The ID of a workspace
         */
        workspaceId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}/edges';
};

export type EdgesScaCreateErrors = {
    /**
     * TypeORM related errors
     */
    400: ScaExceptionFilterDto;
    /**
     * TypeORM related constraint errors
     */
    409: ScaExceptionFilterDto;
};

export type EdgesScaCreateError =
    EdgesScaCreateErrors[keyof EdgesScaCreateErrors];

export type EdgesScaCreateResponses = {
    /**
     * Bug, can't disable 200 response from custom decorator
     */
    200: unknown;
    /**
     * Return a new Edge
     */
    201: EdgeDto;
};

export type EdgesScaCreateResponse =
    EdgesScaCreateResponses[keyof EdgesScaCreateResponses];

export type EdgesScaRemoveData = {
    body?: never;
    path: {
        /**
         * The ID of a Edge
         */
        edgeId: number;
        /**
         * The ID of a project
         */
        projectId: number;
        /**
         * The ID of a workspace
         */
        workspaceId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}/edges/{edgeId}';
};

export type EdgesScaRemoveErrors = {
    /**
     * A Edge with the specified edgeId was not found
     */
    404: unknown;
};

export type EdgesScaRemoveResponses = {
    /**
     * The Edge has been deleted
     */
    204: void;
};

export type EdgesScaRemoveResponse =
    EdgesScaRemoveResponses[keyof EdgesScaRemoveResponses];

export type EdgesScaGetData = {
    body?: never;
    path: {
        /**
         * The ID of a Edge
         */
        edgeId: number;
        /**
         * The ID of a project
         */
        projectId: number;
        /**
         * The ID of a workspace
         */
        workspaceId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}/edges/{edgeId}';
};

export type EdgesScaGetErrors = {
    /**
     * A Edge with the specified edgeId was not found
     */
    404: unknown;
};

export type EdgesScaGetResponses = {
    /**
     * Return a Edge by edgeId
     */
    200: EdgeDto;
};

export type EdgesScaGetResponse =
    EdgesScaGetResponses[keyof EdgesScaGetResponses];

export type EdgesScaUpdateData = {
    body: EdgeUpdateDto;
    path: {
        /**
         * The ID of a Edge
         */
        edgeId: number;
        /**
         * The ID of a project
         */
        projectId: number;
        /**
         * The ID of a workspace
         */
        workspaceId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}/edges/{edgeId}';
};

export type EdgesScaUpdateErrors = {
    /**
     * TypeORM related errors
     */
    400: ScaExceptionFilterDto;
    /**
     * A Edge with the specified edgeId was not found
     */
    404: unknown;
    /**
     * TypeORM related constraint errors
     */
    409: ScaExceptionFilterDto;
};

export type EdgesScaUpdateError =
    EdgesScaUpdateErrors[keyof EdgesScaUpdateErrors];

export type EdgesScaUpdateResponses = {
    /**
     * Return a Edge by edgeId
     */
    200: EdgeDto;
};

export type EdgesScaUpdateResponse =
    EdgesScaUpdateResponses[keyof EdgesScaUpdateResponses];

export type NodesScaPaginateData = {
    body?: never;
    path: {
        /**
         * The ID of a project
         */
        projectId: number;
        /**
         * The ID of a workspace
         */
        workspaceId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}/nodes';
};

export type NodesScaPaginateResponses = {
    /**
     * Return a list of Node
     */
    200: NodeDto;
};

export type NodesScaPaginateResponse =
    NodesScaPaginateResponses[keyof NodesScaPaginateResponses];

export type NodesScaCreateData = {
    body: NodeCreateDto;
    path: {
        /**
         * The ID of a project
         */
        projectId: number;
        /**
         * The ID of a workspace
         */
        workspaceId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}/nodes';
};

export type NodesScaCreateErrors = {
    /**
     * TypeORM related errors
     */
    400: ScaExceptionFilterDto;
    /**
     * TypeORM related constraint errors
     */
    409: ScaExceptionFilterDto;
};

export type NodesScaCreateError =
    NodesScaCreateErrors[keyof NodesScaCreateErrors];

export type NodesScaCreateResponses = {
    /**
     * Bug, can't disable 200 response from custom decorator
     */
    200: unknown;
    /**
     * Return a new Node
     */
    201: NodeDto;
};

export type NodesScaCreateResponse =
    NodesScaCreateResponses[keyof NodesScaCreateResponses];

export type NodesScaRemoveData = {
    body?: never;
    path: {
        /**
         * The ID of a Node
         */
        nodeId: number;
        /**
         * The ID of a project
         */
        projectId: number;
        /**
         * The ID of a workspace
         */
        workspaceId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}/nodes/{nodeId}';
};

export type NodesScaRemoveErrors = {
    /**
     * A Node with the specified nodeId was not found
     */
    404: unknown;
};

export type NodesScaRemoveResponses = {
    /**
     * The Node has been deleted
     */
    204: void;
};

export type NodesScaRemoveResponse =
    NodesScaRemoveResponses[keyof NodesScaRemoveResponses];

export type NodesScaGetData = {
    body?: never;
    path: {
        /**
         * The ID of a Node
         */
        nodeId: number;
        /**
         * The ID of a project
         */
        projectId: number;
        /**
         * The ID of a workspace
         */
        workspaceId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}/nodes/{nodeId}';
};

export type NodesScaGetErrors = {
    /**
     * A Node with the specified nodeId was not found
     */
    404: unknown;
};

export type NodesScaGetResponses = {
    /**
     * Return a Node by nodeId
     */
    200: NodeDto;
};

export type NodesScaGetResponse =
    NodesScaGetResponses[keyof NodesScaGetResponses];

export type NodesScaUpdateData = {
    body: NodeUpdateDto;
    path: {
        /**
         * The ID of a Node
         */
        nodeId: number;
        /**
         * The ID of a project
         */
        projectId: number;
        /**
         * The ID of a workspace
         */
        workspaceId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}/nodes/{nodeId}';
};

export type NodesScaUpdateErrors = {
    /**
     * TypeORM related errors
     */
    400: ScaExceptionFilterDto;
    /**
     * A Node with the specified nodeId was not found
     */
    404: unknown;
    /**
     * TypeORM related constraint errors
     */
    409: ScaExceptionFilterDto;
};

export type NodesScaUpdateError =
    NodesScaUpdateErrors[keyof NodesScaUpdateErrors];

export type NodesScaUpdateResponses = {
    /**
     * Return a Node by nodeId
     */
    200: NodeDto;
};

export type NodesScaUpdateResponse =
    NodesScaUpdateResponses[keyof NodesScaUpdateResponses];

export type WorkspacesScaPaginateData = {
    body?: never;
    path: {
        /**
         * The ID of a project
         */
        projectId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces';
};

export type WorkspacesScaPaginateResponses = {
    /**
     * Return a list of Workspace
     */
    200: WorkspaceDto;
};

export type WorkspacesScaPaginateResponse =
    WorkspacesScaPaginateResponses[keyof WorkspacesScaPaginateResponses];

export type WorkspacesScaCreateData = {
    body: WorkspaceCreateDto;
    path: {
        /**
         * The ID of a project
         */
        projectId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces';
};

export type WorkspacesScaCreateErrors = {
    /**
     * TypeORM related errors
     */
    400: ScaExceptionFilterDto;
    /**
     * TypeORM related constraint errors
     */
    409: ScaExceptionFilterDto;
};

export type WorkspacesScaCreateError =
    WorkspacesScaCreateErrors[keyof WorkspacesScaCreateErrors];

export type WorkspacesScaCreateResponses = {
    /**
     * Bug, can't disable 200 response from custom decorator
     */
    200: unknown;
    /**
     * Return a new Workspace
     */
    201: WorkspaceDto;
};

export type WorkspacesScaCreateResponse =
    WorkspacesScaCreateResponses[keyof WorkspacesScaCreateResponses];

export type WorkspacesScaRemoveData = {
    body?: never;
    path: {
        /**
         * The ID of a Workspace
         */
        workspaceId: number;
        /**
         * The ID of a project
         */
        projectId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}';
};

export type WorkspacesScaRemoveErrors = {
    /**
     * A Workspace with the specified workspaceId was not found
     */
    404: unknown;
};

export type WorkspacesScaRemoveResponses = {
    /**
     * The Workspace has been deleted
     */
    204: void;
};

export type WorkspacesScaRemoveResponse =
    WorkspacesScaRemoveResponses[keyof WorkspacesScaRemoveResponses];

export type WorkspacesScaGetData = {
    body?: never;
    path: {
        /**
         * The ID of a Workspace
         */
        workspaceId: number;
        /**
         * The ID of a project
         */
        projectId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}';
};

export type WorkspacesScaGetErrors = {
    /**
     * A Workspace with the specified workspaceId was not found
     */
    404: unknown;
};

export type WorkspacesScaGetResponses = {
    /**
     * Return a Workspace by workspaceId
     */
    200: WorkspaceDto;
};

export type WorkspacesScaGetResponse =
    WorkspacesScaGetResponses[keyof WorkspacesScaGetResponses];

export type WorkspacesScaUpdateData = {
    body: WorkspaceUpdateDto;
    path: {
        /**
         * The ID of a Workspace
         */
        workspaceId: number;
        /**
         * The ID of a project
         */
        projectId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/workspaces/{workspaceId}';
};

export type WorkspacesScaUpdateErrors = {
    /**
     * TypeORM related errors
     */
    400: ScaExceptionFilterDto;
    /**
     * A Workspace with the specified workspaceId was not found
     */
    404: unknown;
    /**
     * TypeORM related constraint errors
     */
    409: ScaExceptionFilterDto;
};

export type WorkspacesScaUpdateError =
    WorkspacesScaUpdateErrors[keyof WorkspacesScaUpdateErrors];

export type WorkspacesScaUpdateResponses = {
    /**
     * Return a Workspace by workspaceId
     */
    200: WorkspaceDto;
};

export type WorkspacesScaUpdateResponse =
    WorkspacesScaUpdateResponses[keyof WorkspacesScaUpdateResponses];

export type SettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/app/settings';
};

export type SettingsGetResponses = {
    200: SettingDto;
};

export type SettingsGetResponse =
    SettingsGetResponses[keyof SettingsGetResponses];

export type SettingsUpdateData = {
    body: SettingDto;
    path?: never;
    query?: never;
    url: '/api/app/settings';
};

export type SettingsUpdateResponses = {
    200: SettingDto;
};

export type SettingsUpdateResponse =
    SettingsUpdateResponses[keyof SettingsUpdateResponses];

export type SettingsReplaceData = {
    body: SettingDto;
    path?: never;
    query?: never;
    url: '/api/app/settings';
};

export type SettingsReplaceResponses = {
    200: SettingDto;
};

export type SettingsReplaceResponse =
    SettingsReplaceResponses[keyof SettingsReplaceResponses];
