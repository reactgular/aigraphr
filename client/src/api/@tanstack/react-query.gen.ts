// This file is auto-generated by @hey-api/openapi-ts

import type {Options} from '@hey-api/client-fetch';
import {
    queryOptions,
    type UseMutationOptions,
    type DefaultError
} from '@tanstack/react-query';
import type {
    ProjectsScaPaginateData,
    ProjectsScaCreateData,
    ProjectsScaCreateResponse,
    ProjectsScaRemoveData,
    ProjectsScaRemoveResponse,
    ProjectsScaGetData,
    ProjectsScaUpdateData,
    ProjectsScaUpdateResponse,
    AttributesIndexData,
    AttributesCreateData,
    AttributesCreateResponse,
    AttributesRemoveData,
    AttributesRemoveResponse,
    AttributesGetData,
    AttributesUpdateData,
    AttributesUpdateResponse,
    EdgesIndexData,
    EdgesCreateData,
    EdgesCreateResponse,
    EdgesRemoveData,
    EdgesRemoveResponse,
    EdgesGetData,
    EdgesUpdateData,
    EdgesUpdateResponse,
    NodesIndexData,
    NodesCreateData,
    NodesCreateResponse,
    NodesRemoveData,
    NodesRemoveResponse,
    NodesGetData,
    NodesUpdateData,
    NodesUpdateResponse,
    WorkspacesIndexData,
    WorkspacesCreateData,
    WorkspacesCreateResponse,
    WorkspacesRemoveData,
    WorkspacesRemoveResponse,
    WorkspacesGetData,
    WorkspacesUpdateData,
    WorkspacesUpdateResponse,
    SettingsGetData,
    SettingsUpdateData,
    SettingsUpdateResponse,
    SettingsReplaceData,
    SettingsReplaceResponse
} from '../types.gen';
import {
    client,
    projectsScaPaginate,
    projectsScaCreate,
    projectsScaRemove,
    projectsScaGet,
    projectsScaUpdate,
    attributesIndex,
    attributesCreate,
    attributesRemove,
    attributesGet,
    attributesUpdate,
    edgesIndex,
    edgesCreate,
    edgesRemove,
    edgesGet,
    edgesUpdate,
    nodesIndex,
    nodesCreate,
    nodesRemove,
    nodesGet,
    nodesUpdate,
    workspacesIndex,
    workspacesCreate,
    workspacesRemove,
    workspacesGet,
    workspacesUpdate,
    settingsGet,
    settingsUpdate,
    settingsReplace
} from '../sdk.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(
    id: string,
    options?: TOptions,
    infinite?: boolean
): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = {
        _id: id,
        baseUrl: (options?.client ?? client).getConfig().baseUrl
    } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const projectsScaPaginateQueryKey = (
    options?: Options<ProjectsScaPaginateData>
) => [createQueryKey('projectsScaPaginate', options)];

export const projectsScaPaginateOptions = (
    options?: Options<ProjectsScaPaginateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsScaPaginate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsScaPaginateQueryKey(options)
    });
};

export const projectsScaCreateQueryKey = (
    options: Options<ProjectsScaCreateData>
) => [createQueryKey('projectsScaCreate', options)];

export const projectsScaCreateOptions = (
    options: Options<ProjectsScaCreateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsScaCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsScaCreateQueryKey(options)
    });
};

export const projectsScaCreateMutation = (
    options?: Partial<Options<ProjectsScaCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsScaCreateResponse,
        DefaultError,
        Options<ProjectsScaCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsScaCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const projectsScaRemoveMutation = (
    options?: Partial<Options<ProjectsScaRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsScaRemoveResponse,
        DefaultError,
        Options<ProjectsScaRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsScaRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const projectsScaGetQueryKey = (
    options: Options<ProjectsScaGetData>
) => [createQueryKey('projectsScaGet', options)];

export const projectsScaGetOptions = (options: Options<ProjectsScaGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsScaGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsScaGetQueryKey(options)
    });
};

export const projectsScaUpdateMutation = (
    options?: Partial<Options<ProjectsScaUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsScaUpdateResponse,
        DefaultError,
        Options<ProjectsScaUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsScaUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const attributesIndexQueryKey = (
    options?: Options<AttributesIndexData>
) => [createQueryKey('attributesIndex', options)];

export const attributesIndexOptions = (
    options?: Options<AttributesIndexData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await attributesIndex({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: attributesIndexQueryKey(options)
    });
};

export const attributesCreateQueryKey = (
    options: Options<AttributesCreateData>
) => [createQueryKey('attributesCreate', options)];

export const attributesCreateOptions = (
    options: Options<AttributesCreateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await attributesCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: attributesCreateQueryKey(options)
    });
};

export const attributesCreateMutation = (
    options?: Partial<Options<AttributesCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        AttributesCreateResponse,
        DefaultError,
        Options<AttributesCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await attributesCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const attributesRemoveMutation = (
    options?: Partial<Options<AttributesRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        AttributesRemoveResponse,
        DefaultError,
        Options<AttributesRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await attributesRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const attributesGetQueryKey = (options: Options<AttributesGetData>) => [
    createQueryKey('attributesGet', options)
];

export const attributesGetOptions = (options: Options<AttributesGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await attributesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: attributesGetQueryKey(options)
    });
};

export const attributesUpdateMutation = (
    options?: Partial<Options<AttributesUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        AttributesUpdateResponse,
        DefaultError,
        Options<AttributesUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await attributesUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const edgesIndexQueryKey = (options?: Options<EdgesIndexData>) => [
    createQueryKey('edgesIndex', options)
];

export const edgesIndexOptions = (options?: Options<EdgesIndexData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await edgesIndex({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: edgesIndexQueryKey(options)
    });
};

export const edgesCreateQueryKey = (options: Options<EdgesCreateData>) => [
    createQueryKey('edgesCreate', options)
];

export const edgesCreateOptions = (options: Options<EdgesCreateData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await edgesCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: edgesCreateQueryKey(options)
    });
};

export const edgesCreateMutation = (
    options?: Partial<Options<EdgesCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        EdgesCreateResponse,
        DefaultError,
        Options<EdgesCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await edgesCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const edgesRemoveMutation = (
    options?: Partial<Options<EdgesRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        EdgesRemoveResponse,
        DefaultError,
        Options<EdgesRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await edgesRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const edgesGetQueryKey = (options: Options<EdgesGetData>) => [
    createQueryKey('edgesGet', options)
];

export const edgesGetOptions = (options: Options<EdgesGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await edgesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: edgesGetQueryKey(options)
    });
};

export const edgesUpdateMutation = (
    options?: Partial<Options<EdgesUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        EdgesUpdateResponse,
        DefaultError,
        Options<EdgesUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await edgesUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const nodesIndexQueryKey = (options?: Options<NodesIndexData>) => [
    createQueryKey('nodesIndex', options)
];

export const nodesIndexOptions = (options?: Options<NodesIndexData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await nodesIndex({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: nodesIndexQueryKey(options)
    });
};

export const nodesCreateQueryKey = (options: Options<NodesCreateData>) => [
    createQueryKey('nodesCreate', options)
];

export const nodesCreateOptions = (options: Options<NodesCreateData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await nodesCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: nodesCreateQueryKey(options)
    });
};

export const nodesCreateMutation = (
    options?: Partial<Options<NodesCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        NodesCreateResponse,
        DefaultError,
        Options<NodesCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await nodesCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const nodesRemoveMutation = (
    options?: Partial<Options<NodesRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        NodesRemoveResponse,
        DefaultError,
        Options<NodesRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await nodesRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const nodesGetQueryKey = (options: Options<NodesGetData>) => [
    createQueryKey('nodesGet', options)
];

export const nodesGetOptions = (options: Options<NodesGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await nodesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: nodesGetQueryKey(options)
    });
};

export const nodesUpdateMutation = (
    options?: Partial<Options<NodesUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        NodesUpdateResponse,
        DefaultError,
        Options<NodesUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await nodesUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesIndexQueryKey = (
    options?: Options<WorkspacesIndexData>
) => [createQueryKey('workspacesIndex', options)];

export const workspacesIndexOptions = (
    options?: Options<WorkspacesIndexData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesIndex({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesIndexQueryKey(options)
    });
};

export const workspacesCreateQueryKey = (
    options: Options<WorkspacesCreateData>
) => [createQueryKey('workspacesCreate', options)];

export const workspacesCreateOptions = (
    options: Options<WorkspacesCreateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesCreateQueryKey(options)
    });
};

export const workspacesCreateMutation = (
    options?: Partial<Options<WorkspacesCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesCreateResponse,
        DefaultError,
        Options<WorkspacesCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesRemoveMutation = (
    options?: Partial<Options<WorkspacesRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesRemoveResponse,
        DefaultError,
        Options<WorkspacesRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesGetQueryKey = (options: Options<WorkspacesGetData>) => [
    createQueryKey('workspacesGet', options)
];

export const workspacesGetOptions = (options: Options<WorkspacesGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesGetQueryKey(options)
    });
};

export const workspacesUpdateMutation = (
    options?: Partial<Options<WorkspacesUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesUpdateResponse,
        DefaultError,
        Options<WorkspacesUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const settingsGetQueryKey = (options?: Options<SettingsGetData>) => [
    createQueryKey('settingsGet', options)
];

export const settingsGetOptions = (options?: Options<SettingsGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await settingsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: settingsGetQueryKey(options)
    });
};

export const settingsUpdateMutation = (
    options?: Partial<Options<SettingsUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        SettingsUpdateResponse,
        DefaultError,
        Options<SettingsUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await settingsUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const settingsReplaceMutation = (
    options?: Partial<Options<SettingsReplaceData>>
) => {
    const mutationOptions: UseMutationOptions<
        SettingsReplaceResponse,
        DefaultError,
        Options<SettingsReplaceData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await settingsReplace({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
