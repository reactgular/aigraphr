// This file is auto-generated by @hey-api/openapi-ts

import type {Options} from '@hey-api/client-fetch';
import {
    type UseMutationOptions,
    type DefaultError,
    queryOptions
} from '@tanstack/react-query';
import type {
    AppControllerRemoveData,
    AppControllerGetHelloData,
    AppControllerPatchData,
    AppControllerCreateData,
    AppControllerPutData,
    ProjectsControllerFindManyData
} from '../types.gen';
import {
    appControllerRemove,
    client,
    appControllerGetHello,
    appControllerPatch,
    appControllerCreate,
    appControllerPut,
    projectsControllerFindMany
} from '../sdk.gen';

export const appControllerRemoveMutation = (
    options?: Partial<Options<AppControllerRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<AppControllerRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await appControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(
    id: string,
    options?: TOptions,
    infinite?: boolean
): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = {
        _id: id,
        baseUrl: (options?.client ?? client).getConfig().baseUrl
    } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const appControllerGetHelloQueryKey = (
    options?: Options<AppControllerGetHelloData>
) => [createQueryKey('appControllerGetHello', options)];

export const appControllerGetHelloOptions = (
    options?: Options<AppControllerGetHelloData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await appControllerGetHello({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appControllerGetHelloQueryKey(options)
    });
};

export const appControllerPatchMutation = (
    options?: Partial<Options<AppControllerPatchData>>
) => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<AppControllerPatchData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await appControllerPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const appControllerCreateQueryKey = (
    options?: Options<AppControllerCreateData>
) => [createQueryKey('appControllerCreate', options)];

export const appControllerCreateOptions = (
    options?: Options<AppControllerCreateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await appControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appControllerCreateQueryKey(options)
    });
};

export const appControllerCreateMutation = (
    options?: Partial<Options<AppControllerCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<AppControllerCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await appControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const appControllerPutMutation = (
    options?: Partial<Options<AppControllerPutData>>
) => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<AppControllerPutData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await appControllerPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const projectsControllerFindManyQueryKey = (
    options?: Options<ProjectsControllerFindManyData>
) => [createQueryKey('projectsControllerFindMany', options)];

export const projectsControllerFindManyOptions = (
    options?: Options<ProjectsControllerFindManyData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsControllerFindMany({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsControllerFindManyQueryKey(options)
    });
};
