// This file is auto-generated by @hey-api/openapi-ts

import type {Options} from '@hey-api/client-fetch';
import {
    queryOptions,
    type UseMutationOptions,
    type DefaultError
} from '@tanstack/react-query';
import type {
    ProjectsPaginateData,
    ProjectsCreateData,
    ProjectsCreateError,
    ProjectsCreateResponse,
    ProjectsRemoveData,
    ProjectsRemoveResponse,
    ProjectsGetData,
    ProjectsUpdateData,
    ProjectsUpdateError,
    ProjectsUpdateResponse,
    ProjectsCreateValidateData,
    ProjectsCreateValidateError,
    ProjectsCreateValidateResponse,
    ProjectsUpdateValidateData,
    ProjectsUpdateValidateError,
    ProjectsUpdateValidateResponse,
    EdgesPaginateData,
    EdgesCreateData,
    EdgesCreateError,
    EdgesCreateResponse,
    EdgesRemoveData,
    EdgesRemoveResponse,
    EdgesGetData,
    EdgesUpdateData,
    EdgesUpdateError,
    EdgesUpdateResponse,
    NodesPaginateData,
    NodesCreateData,
    NodesCreateError,
    NodesCreateResponse,
    NodesRemoveData,
    NodesRemoveResponse,
    NodesGetData,
    NodesUpdateData,
    NodesUpdateError,
    NodesUpdateResponse,
    WorkspacesPaginateData,
    WorkspacesCreateData,
    WorkspacesCreateError,
    WorkspacesCreateResponse,
    WorkspacesRemoveData,
    WorkspacesRemoveResponse,
    WorkspacesGetData,
    WorkspacesUpdateData,
    WorkspacesUpdateError,
    WorkspacesUpdateResponse,
    WorkspacesCreateValidateData,
    WorkspacesCreateValidateError,
    WorkspacesCreateValidateResponse,
    WorkspacesUpdateValidateData,
    WorkspacesUpdateValidateError,
    WorkspacesUpdateValidateResponse,
    SettingsGetData,
    SettingsUpdateData,
    SettingsUpdateResponse,
    SettingsReplaceData,
    SettingsReplaceResponse,
    GrNodesPaginateData,
    GrNodesGetData
} from '../types.gen';
import {
    client,
    projectsPaginate,
    projectsCreate,
    projectsRemove,
    projectsGet,
    projectsUpdate,
    projectsCreateValidate,
    projectsUpdateValidate,
    edgesPaginate,
    edgesCreate,
    edgesRemove,
    edgesGet,
    edgesUpdate,
    nodesPaginate,
    nodesCreate,
    nodesRemove,
    nodesGet,
    nodesUpdate,
    workspacesPaginate,
    workspacesCreate,
    workspacesRemove,
    workspacesGet,
    workspacesUpdate,
    workspacesCreateValidate,
    workspacesUpdateValidate,
    settingsGet,
    settingsUpdate,
    settingsReplace,
    grNodesPaginate,
    grNodesGet
} from '../sdk.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(
    id: string,
    options?: TOptions,
    infinite?: boolean
): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = {
        _id: id,
        baseUrl: (options?.client ?? client).getConfig().baseUrl
    } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const projectsPaginateQueryKey = (
    options?: Options<ProjectsPaginateData>
) => [createQueryKey('projectsPaginate', options)];

export const projectsPaginateOptions = (
    options?: Options<ProjectsPaginateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsPaginate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsPaginateQueryKey(options)
    });
};

export const projectsCreateQueryKey = (
    options: Options<ProjectsCreateData>
) => [createQueryKey('projectsCreate', options)];

export const projectsCreateOptions = (options: Options<ProjectsCreateData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsCreateQueryKey(options)
    });
};

export const projectsCreateMutation = (
    options?: Partial<Options<ProjectsCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsCreateResponse,
        ProjectsCreateError,
        Options<ProjectsCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const projectsRemoveMutation = (
    options?: Partial<Options<ProjectsRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsRemoveResponse,
        DefaultError,
        Options<ProjectsRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const projectsGetQueryKey = (options: Options<ProjectsGetData>) => [
    createQueryKey('projectsGet', options)
];

export const projectsGetOptions = (options: Options<ProjectsGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsGetQueryKey(options)
    });
};

export const projectsUpdateMutation = (
    options?: Partial<Options<ProjectsUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsUpdateResponse,
        ProjectsUpdateError,
        Options<ProjectsUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const projectsCreateValidateQueryKey = (
    options: Options<ProjectsCreateValidateData>
) => [createQueryKey('projectsCreateValidate', options)];

export const projectsCreateValidateOptions = (
    options: Options<ProjectsCreateValidateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsCreateValidate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsCreateValidateQueryKey(options)
    });
};

export const projectsCreateValidateMutation = (
    options?: Partial<Options<ProjectsCreateValidateData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsCreateValidateResponse,
        ProjectsCreateValidateError,
        Options<ProjectsCreateValidateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsCreateValidate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const projectsUpdateValidateMutation = (
    options?: Partial<Options<ProjectsUpdateValidateData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsUpdateValidateResponse,
        ProjectsUpdateValidateError,
        Options<ProjectsUpdateValidateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsUpdateValidate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const edgesPaginateQueryKey = (options: Options<EdgesPaginateData>) => [
    createQueryKey('edgesPaginate', options)
];

export const edgesPaginateOptions = (options: Options<EdgesPaginateData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await edgesPaginate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: edgesPaginateQueryKey(options)
    });
};

export const edgesCreateQueryKey = (options: Options<EdgesCreateData>) => [
    createQueryKey('edgesCreate', options)
];

export const edgesCreateOptions = (options: Options<EdgesCreateData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await edgesCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: edgesCreateQueryKey(options)
    });
};

export const edgesCreateMutation = (
    options?: Partial<Options<EdgesCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        EdgesCreateResponse,
        EdgesCreateError,
        Options<EdgesCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await edgesCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const edgesRemoveMutation = (
    options?: Partial<Options<EdgesRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        EdgesRemoveResponse,
        DefaultError,
        Options<EdgesRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await edgesRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const edgesGetQueryKey = (options: Options<EdgesGetData>) => [
    createQueryKey('edgesGet', options)
];

export const edgesGetOptions = (options: Options<EdgesGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await edgesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: edgesGetQueryKey(options)
    });
};

export const edgesUpdateMutation = (
    options?: Partial<Options<EdgesUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        EdgesUpdateResponse,
        EdgesUpdateError,
        Options<EdgesUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await edgesUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const nodesPaginateQueryKey = (options: Options<NodesPaginateData>) => [
    createQueryKey('nodesPaginate', options)
];

export const nodesPaginateOptions = (options: Options<NodesPaginateData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await nodesPaginate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: nodesPaginateQueryKey(options)
    });
};

export const nodesCreateQueryKey = (options: Options<NodesCreateData>) => [
    createQueryKey('nodesCreate', options)
];

export const nodesCreateOptions = (options: Options<NodesCreateData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await nodesCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: nodesCreateQueryKey(options)
    });
};

export const nodesCreateMutation = (
    options?: Partial<Options<NodesCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        NodesCreateResponse,
        NodesCreateError,
        Options<NodesCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await nodesCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const nodesRemoveMutation = (
    options?: Partial<Options<NodesRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        NodesRemoveResponse,
        DefaultError,
        Options<NodesRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await nodesRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const nodesGetQueryKey = (options: Options<NodesGetData>) => [
    createQueryKey('nodesGet', options)
];

export const nodesGetOptions = (options: Options<NodesGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await nodesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: nodesGetQueryKey(options)
    });
};

export const nodesUpdateMutation = (
    options?: Partial<Options<NodesUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        NodesUpdateResponse,
        NodesUpdateError,
        Options<NodesUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await nodesUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesPaginateQueryKey = (
    options: Options<WorkspacesPaginateData>
) => [createQueryKey('workspacesPaginate', options)];

export const workspacesPaginateOptions = (
    options: Options<WorkspacesPaginateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesPaginate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesPaginateQueryKey(options)
    });
};

export const workspacesCreateQueryKey = (
    options: Options<WorkspacesCreateData>
) => [createQueryKey('workspacesCreate', options)];

export const workspacesCreateOptions = (
    options: Options<WorkspacesCreateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesCreateQueryKey(options)
    });
};

export const workspacesCreateMutation = (
    options?: Partial<Options<WorkspacesCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesCreateResponse,
        WorkspacesCreateError,
        Options<WorkspacesCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesRemoveMutation = (
    options?: Partial<Options<WorkspacesRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesRemoveResponse,
        DefaultError,
        Options<WorkspacesRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesGetQueryKey = (options: Options<WorkspacesGetData>) => [
    createQueryKey('workspacesGet', options)
];

export const workspacesGetOptions = (options: Options<WorkspacesGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesGetQueryKey(options)
    });
};

export const workspacesUpdateMutation = (
    options?: Partial<Options<WorkspacesUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesUpdateResponse,
        WorkspacesUpdateError,
        Options<WorkspacesUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesCreateValidateQueryKey = (
    options: Options<WorkspacesCreateValidateData>
) => [createQueryKey('workspacesCreateValidate', options)];

export const workspacesCreateValidateOptions = (
    options: Options<WorkspacesCreateValidateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesCreateValidate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesCreateValidateQueryKey(options)
    });
};

export const workspacesCreateValidateMutation = (
    options?: Partial<Options<WorkspacesCreateValidateData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesCreateValidateResponse,
        WorkspacesCreateValidateError,
        Options<WorkspacesCreateValidateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesCreateValidate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesUpdateValidateMutation = (
    options?: Partial<Options<WorkspacesUpdateValidateData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesUpdateValidateResponse,
        WorkspacesUpdateValidateError,
        Options<WorkspacesUpdateValidateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesUpdateValidate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const settingsGetQueryKey = (options?: Options<SettingsGetData>) => [
    createQueryKey('settingsGet', options)
];

export const settingsGetOptions = (options?: Options<SettingsGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await settingsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: settingsGetQueryKey(options)
    });
};

export const settingsUpdateMutation = (
    options?: Partial<Options<SettingsUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        SettingsUpdateResponse,
        DefaultError,
        Options<SettingsUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await settingsUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const settingsReplaceMutation = (
    options?: Partial<Options<SettingsReplaceData>>
) => {
    const mutationOptions: UseMutationOptions<
        SettingsReplaceResponse,
        DefaultError,
        Options<SettingsReplaceData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await settingsReplace({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const grNodesPaginateQueryKey = (
    options?: Options<GrNodesPaginateData>
) => [createQueryKey('grNodesPaginate', options)];

export const grNodesPaginateOptions = (
    options?: Options<GrNodesPaginateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await grNodesPaginate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: grNodesPaginateQueryKey(options)
    });
};

export const grNodesGetQueryKey = (options: Options<GrNodesGetData>) => [
    createQueryKey('grNodesGet', options)
];

export const grNodesGetOptions = (options: Options<GrNodesGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await grNodesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: grNodesGetQueryKey(options)
    });
};
