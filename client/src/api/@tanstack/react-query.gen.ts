// This file is auto-generated by @hey-api/openapi-ts

import type {Options} from '@hey-api/client-fetch';
import {
    queryOptions,
    type UseMutationOptions,
    type DefaultError
} from '@tanstack/react-query';
import type {
    ProjectsScaPaginateData,
    ProjectsScaCreateData,
    ProjectsScaCreateResponse,
    ProjectsScaRemoveData,
    ProjectsScaRemoveResponse,
    ProjectsScaGetData,
    ProjectsScaUpdateData,
    ProjectsScaUpdateResponse,
    AttributesScaPaginateData,
    AttributesScaCreateData,
    AttributesScaCreateResponse,
    AttributesScaRemoveData,
    AttributesScaRemoveResponse,
    AttributesScaGetData,
    AttributesScaUpdateData,
    AttributesScaUpdateResponse,
    EdgesScaPaginateData,
    EdgesScaCreateData,
    EdgesScaCreateResponse,
    EdgesScaRemoveData,
    EdgesScaRemoveResponse,
    EdgesScaGetData,
    EdgesScaUpdateData,
    EdgesScaUpdateResponse,
    NodesScaPaginateData,
    NodesScaCreateData,
    NodesScaCreateResponse,
    NodesScaRemoveData,
    NodesScaRemoveResponse,
    NodesScaGetData,
    NodesScaUpdateData,
    NodesScaUpdateResponse,
    WorkspacesScaPaginateData,
    WorkspacesScaCreateData,
    WorkspacesScaCreateResponse,
    WorkspacesScaRemoveData,
    WorkspacesScaRemoveResponse,
    WorkspacesScaGetData,
    WorkspacesScaUpdateData,
    WorkspacesScaUpdateResponse,
    SettingsGetData,
    SettingsUpdateData,
    SettingsUpdateResponse,
    SettingsReplaceData,
    SettingsReplaceResponse
} from '../types.gen';
import {
    client,
    projectsScaPaginate,
    projectsScaCreate,
    projectsScaRemove,
    projectsScaGet,
    projectsScaUpdate,
    attributesScaPaginate,
    attributesScaCreate,
    attributesScaRemove,
    attributesScaGet,
    attributesScaUpdate,
    edgesScaPaginate,
    edgesScaCreate,
    edgesScaRemove,
    edgesScaGet,
    edgesScaUpdate,
    nodesScaPaginate,
    nodesScaCreate,
    nodesScaRemove,
    nodesScaGet,
    nodesScaUpdate,
    workspacesScaPaginate,
    workspacesScaCreate,
    workspacesScaRemove,
    workspacesScaGet,
    workspacesScaUpdate,
    settingsGet,
    settingsUpdate,
    settingsReplace
} from '../sdk.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(
    id: string,
    options?: TOptions,
    infinite?: boolean
): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = {
        _id: id,
        baseUrl: (options?.client ?? client).getConfig().baseUrl
    } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const projectsScaPaginateQueryKey = (
    options?: Options<ProjectsScaPaginateData>
) => [createQueryKey('projectsScaPaginate', options)];

export const projectsScaPaginateOptions = (
    options?: Options<ProjectsScaPaginateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsScaPaginate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsScaPaginateQueryKey(options)
    });
};

export const projectsScaCreateQueryKey = (
    options: Options<ProjectsScaCreateData>
) => [createQueryKey('projectsScaCreate', options)];

export const projectsScaCreateOptions = (
    options: Options<ProjectsScaCreateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsScaCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsScaCreateQueryKey(options)
    });
};

export const projectsScaCreateMutation = (
    options?: Partial<Options<ProjectsScaCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsScaCreateResponse,
        DefaultError,
        Options<ProjectsScaCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsScaCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const projectsScaRemoveMutation = (
    options?: Partial<Options<ProjectsScaRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsScaRemoveResponse,
        DefaultError,
        Options<ProjectsScaRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsScaRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const projectsScaGetQueryKey = (
    options: Options<ProjectsScaGetData>
) => [createQueryKey('projectsScaGet', options)];

export const projectsScaGetOptions = (options: Options<ProjectsScaGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsScaGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsScaGetQueryKey(options)
    });
};

export const projectsScaUpdateMutation = (
    options?: Partial<Options<ProjectsScaUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsScaUpdateResponse,
        DefaultError,
        Options<ProjectsScaUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsScaUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const attributesScaPaginateQueryKey = (
    options: Options<AttributesScaPaginateData>
) => [createQueryKey('attributesScaPaginate', options)];

export const attributesScaPaginateOptions = (
    options: Options<AttributesScaPaginateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await attributesScaPaginate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: attributesScaPaginateQueryKey(options)
    });
};

export const attributesScaCreateQueryKey = (
    options: Options<AttributesScaCreateData>
) => [createQueryKey('attributesScaCreate', options)];

export const attributesScaCreateOptions = (
    options: Options<AttributesScaCreateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await attributesScaCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: attributesScaCreateQueryKey(options)
    });
};

export const attributesScaCreateMutation = (
    options?: Partial<Options<AttributesScaCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        AttributesScaCreateResponse,
        DefaultError,
        Options<AttributesScaCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await attributesScaCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const attributesScaRemoveMutation = (
    options?: Partial<Options<AttributesScaRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        AttributesScaRemoveResponse,
        DefaultError,
        Options<AttributesScaRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await attributesScaRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const attributesScaGetQueryKey = (
    options: Options<AttributesScaGetData>
) => [createQueryKey('attributesScaGet', options)];

export const attributesScaGetOptions = (
    options: Options<AttributesScaGetData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await attributesScaGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: attributesScaGetQueryKey(options)
    });
};

export const attributesScaUpdateMutation = (
    options?: Partial<Options<AttributesScaUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        AttributesScaUpdateResponse,
        DefaultError,
        Options<AttributesScaUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await attributesScaUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const edgesScaPaginateQueryKey = (
    options: Options<EdgesScaPaginateData>
) => [createQueryKey('edgesScaPaginate', options)];

export const edgesScaPaginateOptions = (
    options: Options<EdgesScaPaginateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await edgesScaPaginate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: edgesScaPaginateQueryKey(options)
    });
};

export const edgesScaCreateQueryKey = (
    options: Options<EdgesScaCreateData>
) => [createQueryKey('edgesScaCreate', options)];

export const edgesScaCreateOptions = (options: Options<EdgesScaCreateData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await edgesScaCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: edgesScaCreateQueryKey(options)
    });
};

export const edgesScaCreateMutation = (
    options?: Partial<Options<EdgesScaCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        EdgesScaCreateResponse,
        DefaultError,
        Options<EdgesScaCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await edgesScaCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const edgesScaRemoveMutation = (
    options?: Partial<Options<EdgesScaRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        EdgesScaRemoveResponse,
        DefaultError,
        Options<EdgesScaRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await edgesScaRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const edgesScaGetQueryKey = (options: Options<EdgesScaGetData>) => [
    createQueryKey('edgesScaGet', options)
];

export const edgesScaGetOptions = (options: Options<EdgesScaGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await edgesScaGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: edgesScaGetQueryKey(options)
    });
};

export const edgesScaUpdateMutation = (
    options?: Partial<Options<EdgesScaUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        EdgesScaUpdateResponse,
        DefaultError,
        Options<EdgesScaUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await edgesScaUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const nodesScaPaginateQueryKey = (
    options: Options<NodesScaPaginateData>
) => [createQueryKey('nodesScaPaginate', options)];

export const nodesScaPaginateOptions = (
    options: Options<NodesScaPaginateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await nodesScaPaginate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: nodesScaPaginateQueryKey(options)
    });
};

export const nodesScaCreateQueryKey = (
    options: Options<NodesScaCreateData>
) => [createQueryKey('nodesScaCreate', options)];

export const nodesScaCreateOptions = (options: Options<NodesScaCreateData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await nodesScaCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: nodesScaCreateQueryKey(options)
    });
};

export const nodesScaCreateMutation = (
    options?: Partial<Options<NodesScaCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        NodesScaCreateResponse,
        DefaultError,
        Options<NodesScaCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await nodesScaCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const nodesScaRemoveMutation = (
    options?: Partial<Options<NodesScaRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        NodesScaRemoveResponse,
        DefaultError,
        Options<NodesScaRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await nodesScaRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const nodesScaGetQueryKey = (options: Options<NodesScaGetData>) => [
    createQueryKey('nodesScaGet', options)
];

export const nodesScaGetOptions = (options: Options<NodesScaGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await nodesScaGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: nodesScaGetQueryKey(options)
    });
};

export const nodesScaUpdateMutation = (
    options?: Partial<Options<NodesScaUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        NodesScaUpdateResponse,
        DefaultError,
        Options<NodesScaUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await nodesScaUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesScaPaginateQueryKey = (
    options: Options<WorkspacesScaPaginateData>
) => [createQueryKey('workspacesScaPaginate', options)];

export const workspacesScaPaginateOptions = (
    options: Options<WorkspacesScaPaginateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesScaPaginate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesScaPaginateQueryKey(options)
    });
};

export const workspacesScaCreateQueryKey = (
    options: Options<WorkspacesScaCreateData>
) => [createQueryKey('workspacesScaCreate', options)];

export const workspacesScaCreateOptions = (
    options: Options<WorkspacesScaCreateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesScaCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesScaCreateQueryKey(options)
    });
};

export const workspacesScaCreateMutation = (
    options?: Partial<Options<WorkspacesScaCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesScaCreateResponse,
        DefaultError,
        Options<WorkspacesScaCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesScaCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesScaRemoveMutation = (
    options?: Partial<Options<WorkspacesScaRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesScaRemoveResponse,
        DefaultError,
        Options<WorkspacesScaRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesScaRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesScaGetQueryKey = (
    options: Options<WorkspacesScaGetData>
) => [createQueryKey('workspacesScaGet', options)];

export const workspacesScaGetOptions = (
    options: Options<WorkspacesScaGetData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesScaGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesScaGetQueryKey(options)
    });
};

export const workspacesScaUpdateMutation = (
    options?: Partial<Options<WorkspacesScaUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesScaUpdateResponse,
        DefaultError,
        Options<WorkspacesScaUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesScaUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const settingsGetQueryKey = (options?: Options<SettingsGetData>) => [
    createQueryKey('settingsGet', options)
];

export const settingsGetOptions = (options?: Options<SettingsGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await settingsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: settingsGetQueryKey(options)
    });
};

export const settingsUpdateMutation = (
    options?: Partial<Options<SettingsUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        SettingsUpdateResponse,
        DefaultError,
        Options<SettingsUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await settingsUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const settingsReplaceMutation = (
    options?: Partial<Options<SettingsReplaceData>>
) => {
    const mutationOptions: UseMutationOptions<
        SettingsReplaceResponse,
        DefaultError,
        Options<SettingsReplaceData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await settingsReplace({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
