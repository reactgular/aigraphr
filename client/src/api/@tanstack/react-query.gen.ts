// This file is auto-generated by @hey-api/openapi-ts

import type {Options} from '@hey-api/client-fetch';
import {
    queryOptions,
    type UseMutationOptions,
    type DefaultError
} from '@tanstack/react-query';
import type {
    ProjectsIndexData,
    ProjectsCreateData,
    ProjectsCreateResponse,
    ProjectsRemoveData,
    ProjectsGetData,
    ProjectsUpdateData,
    ProjectsUpdateResponse,
    AppRemoveData,
    AppRemoveResponse,
    AppGetHelloData,
    AppPatchData,
    AppPatchResponse,
    AppCreateData,
    AppCreateResponse,
    AppPutData,
    AppPutResponse,
    WorkspacesIndexData,
    WorkspacesCreateData,
    WorkspacesCreateResponse,
    WorkspacesRemoveData,
    WorkspacesGetData,
    WorkspacesUpdateData,
    WorkspacesUpdateResponse
} from '../types.gen';
import {
    client,
    projectsIndex,
    projectsCreate,
    projectsRemove,
    projectsGet,
    projectsUpdate,
    appRemove,
    appGetHello,
    appPatch,
    appCreate,
    appPut,
    workspacesIndex,
    workspacesCreate,
    workspacesRemove,
    workspacesGet,
    workspacesUpdate
} from '../sdk.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(
    id: string,
    options?: TOptions,
    infinite?: boolean
): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = {
        _id: id,
        baseUrl: (options?.client ?? client).getConfig().baseUrl
    } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const projectsIndexQueryKey = (options?: Options<ProjectsIndexData>) => [
    createQueryKey('projectsIndex', options)
];

export const projectsIndexOptions = (options?: Options<ProjectsIndexData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsIndex({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsIndexQueryKey(options)
    });
};

export const projectsCreateQueryKey = (
    options: Options<ProjectsCreateData>
) => [createQueryKey('projectsCreate', options)];

export const projectsCreateOptions = (options: Options<ProjectsCreateData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsCreateQueryKey(options)
    });
};

export const projectsCreateMutation = (
    options?: Partial<Options<ProjectsCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsCreateResponse,
        DefaultError,
        Options<ProjectsCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const projectsRemoveMutation = (
    options?: Partial<Options<ProjectsRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<ProjectsRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const projectsGetQueryKey = (options: Options<ProjectsGetData>) => [
    createQueryKey('projectsGet', options)
];

export const projectsGetOptions = (options: Options<ProjectsGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await projectsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: projectsGetQueryKey(options)
    });
};

export const projectsUpdateMutation = (
    options?: Partial<Options<ProjectsUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        ProjectsUpdateResponse,
        DefaultError,
        Options<ProjectsUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await projectsUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const appRemoveMutation = (
    options?: Partial<Options<AppRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        AppRemoveResponse,
        DefaultError,
        Options<AppRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await appRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const appGetHelloQueryKey = (options?: Options<AppGetHelloData>) => [
    createQueryKey('appGetHello', options)
];

export const appGetHelloOptions = (options?: Options<AppGetHelloData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await appGetHello({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appGetHelloQueryKey(options)
    });
};

export const appPatchMutation = (options?: Partial<Options<AppPatchData>>) => {
    const mutationOptions: UseMutationOptions<
        AppPatchResponse,
        DefaultError,
        Options<AppPatchData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await appPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const appCreateQueryKey = (options?: Options<AppCreateData>) => [
    createQueryKey('appCreate', options)
];

export const appCreateOptions = (options?: Options<AppCreateData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await appCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appCreateQueryKey(options)
    });
};

export const appCreateMutation = (
    options?: Partial<Options<AppCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        AppCreateResponse,
        DefaultError,
        Options<AppCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await appCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const appPutMutation = (options?: Partial<Options<AppPutData>>) => {
    const mutationOptions: UseMutationOptions<
        AppPutResponse,
        DefaultError,
        Options<AppPutData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await appPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesIndexQueryKey = (
    options?: Options<WorkspacesIndexData>
) => [createQueryKey('workspacesIndex', options)];

export const workspacesIndexOptions = (
    options?: Options<WorkspacesIndexData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesIndex({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesIndexQueryKey(options)
    });
};

export const workspacesCreateQueryKey = (
    options: Options<WorkspacesCreateData>
) => [createQueryKey('workspacesCreate', options)];

export const workspacesCreateOptions = (
    options: Options<WorkspacesCreateData>
) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesCreateQueryKey(options)
    });
};

export const workspacesCreateMutation = (
    options?: Partial<Options<WorkspacesCreateData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesCreateResponse,
        DefaultError,
        Options<WorkspacesCreateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesRemoveMutation = (
    options?: Partial<Options<WorkspacesRemoveData>>
) => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<WorkspacesRemoveData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const workspacesGetQueryKey = (options: Options<WorkspacesGetData>) => [
    createQueryKey('workspacesGet', options)
];

export const workspacesGetOptions = (options: Options<WorkspacesGetData>) => {
    return queryOptions({
        queryFn: async ({queryKey, signal}) => {
            const {data} = await workspacesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: workspacesGetQueryKey(options)
    });
};

export const workspacesUpdateMutation = (
    options?: Partial<Options<WorkspacesUpdateData>>
) => {
    const mutationOptions: UseMutationOptions<
        WorkspacesUpdateResponse,
        DefaultError,
        Options<WorkspacesUpdateData>
    > = {
        mutationFn: async (localOptions) => {
            const {data} = await workspacesUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
