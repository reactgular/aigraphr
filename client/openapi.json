{
    "openapi": "3.0.0",
    "paths": {
        "/api/projects": {
            "post": {
                "operationId": "Projects_create",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCreateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bug, can't disable 200 response from custom decorator"
                    },
                    "201": {
                        "description": "Return a new Project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Create a new Project",
                "tags": [
                    "Projects"
                ]
            },
            "get": {
                "operationId": "Projects_scaPaginate",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Return a list of Project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Paginate Project",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/projects/{projectId}": {
            "patch": {
                "operationId": "Projects_update",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a Project by projectId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Project with the specified projectId was not found"
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Update a Project by projectId",
                "tags": [
                    "Projects"
                ]
            },
            "delete": {
                "operationId": "Projects_remove",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The Project has been deleted"
                    },
                    "404": {
                        "description": "A Project with the specified projectId was not found"
                    }
                },
                "summary": "Delete a Project by projectId",
                "tags": [
                    "Projects"
                ]
            },
            "get": {
                "operationId": "Projects_scaGet",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a Project by projectId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Project with the specified projectId was not found"
                    }
                },
                "summary": "Get Project by projectId",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/projects/validates": {
            "post": {
                "operationId": "Projects_scaCreateValidate",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCreateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Validation results of ProjectCreate",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaValidationResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Validates creation of a ProjectCreate",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/projects/{projectId}/validates": {
            "patch": {
                "operationId": "Projects_scaUpdateValidate",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a ProjectUpdate",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Validation results of ProjectUpdate",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaValidationResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A ProjectUpdate with the specified projectId was not found"
                    }
                },
                "summary": "Validates updating a ProjectUpdate by projectId",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/{workspaceId}/edges": {
            "post": {
                "operationId": "Edges_scaCreate",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EdgeCreateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bug, can't disable 200 response from custom decorator"
                    },
                    "201": {
                        "description": "Return a new Edge",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Create a new Edge",
                "tags": [
                    "Edges"
                ]
            },
            "get": {
                "operationId": "Edges_scaPaginate",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a list of Edge",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Paginate Edge",
                "tags": [
                    "Edges"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/{workspaceId}/edges/{edgeId}": {
            "patch": {
                "operationId": "Edges_scaUpdate",
                "parameters": [
                    {
                        "name": "edgeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Edge",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EdgeUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a Edge by edgeId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Edge with the specified edgeId was not found"
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Update a Edge by edgeId",
                "tags": [
                    "Edges"
                ]
            },
            "delete": {
                "operationId": "Edges_scaRemove",
                "parameters": [
                    {
                        "name": "edgeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Edge",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The Edge has been deleted"
                    },
                    "404": {
                        "description": "A Edge with the specified edgeId was not found"
                    }
                },
                "summary": "Delete a Edge by edgeId",
                "tags": [
                    "Edges"
                ]
            },
            "get": {
                "operationId": "Edges_scaGet",
                "parameters": [
                    {
                        "name": "edgeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Edge",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a Edge by edgeId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Edge with the specified edgeId was not found"
                    }
                },
                "summary": "Get Edge by edgeId",
                "tags": [
                    "Edges"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/{workspaceId}/nodes": {
            "post": {
                "operationId": "Nodes_scaCreate",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NodeCreateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bug, can't disable 200 response from custom decorator"
                    },
                    "201": {
                        "description": "Return a new Node",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Create a new Node",
                "tags": [
                    "Nodes"
                ]
            },
            "get": {
                "operationId": "Nodes_scaPaginate",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a list of Node",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Paginate Node",
                "tags": [
                    "Nodes"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/{workspaceId}/nodes/{nodeId}": {
            "patch": {
                "operationId": "Nodes_scaUpdate",
                "parameters": [
                    {
                        "name": "nodeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Node",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NodeUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a Node by nodeId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Node with the specified nodeId was not found"
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Update a Node by nodeId",
                "tags": [
                    "Nodes"
                ]
            },
            "delete": {
                "operationId": "Nodes_scaRemove",
                "parameters": [
                    {
                        "name": "nodeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Node",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The Node has been deleted"
                    },
                    "404": {
                        "description": "A Node with the specified nodeId was not found"
                    }
                },
                "summary": "Delete a Node by nodeId",
                "tags": [
                    "Nodes"
                ]
            },
            "get": {
                "operationId": "Nodes_scaGet",
                "parameters": [
                    {
                        "name": "nodeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Node",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a Node by nodeId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Node with the specified nodeId was not found"
                    }
                },
                "summary": "Get Node by nodeId",
                "tags": [
                    "Nodes"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces": {
            "post": {
                "operationId": "Workspaces_scaCreate",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkspaceCreateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bug, can't disable 200 response from custom decorator"
                    },
                    "201": {
                        "description": "Return a new Workspace",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkspaceDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Create a new Workspace",
                "tags": [
                    "Workspaces"
                ]
            },
            "get": {
                "operationId": "Workspaces_scaPaginate",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a list of Workspace",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkspaceDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Paginate Workspace",
                "tags": [
                    "Workspaces"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/{workspaceId}": {
            "patch": {
                "operationId": "Workspaces_scaUpdate",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Workspace",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkspaceUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a Workspace by workspaceId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkspaceDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Workspace with the specified workspaceId was not found"
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Update a Workspace by workspaceId",
                "tags": [
                    "Workspaces"
                ]
            },
            "delete": {
                "operationId": "Workspaces_scaRemove",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Workspace",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The Workspace has been deleted"
                    },
                    "404": {
                        "description": "A Workspace with the specified workspaceId was not found"
                    }
                },
                "summary": "Delete a Workspace by workspaceId",
                "tags": [
                    "Workspaces"
                ]
            },
            "get": {
                "operationId": "Workspaces_scaGet",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Workspace",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a Workspace by workspaceId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkspaceDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Workspace with the specified workspaceId was not found"
                    }
                },
                "summary": "Get Workspace by workspaceId",
                "tags": [
                    "Workspaces"
                ]
            }
        },
        "/api/app/settings": {
            "get": {
                "operationId": "Settings_get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Get App settings",
                "tags": [
                    "App"
                ]
            },
            "put": {
                "operationId": "Settings_replace",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Replace App settings",
                "tags": [
                    "App"
                ]
            },
            "patch": {
                "operationId": "Settings_update",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Update App settings",
                "tags": [
                    "App"
                ]
            }
        }
    },
    "info": {
        "title": "AIGraphr",
        "description": "AIGraphr API",
        "version": "1.0.0",
        "contact": {}
    },
    "tags": [],
    "servers": [],
    "components": {
        "securitySchemes": {
            "bearer": {
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "type": "http"
            }
        },
        "schemas": {
            "ProjectCreateDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the project (alphanumeric)",
                        "example": "example-project"
                    },
                    "cloneId": {
                        "type": "number",
                        "description": "The ID of the project to clone",
                        "example": 1234
                    }
                },
                "required": [
                    "name"
                ]
            },
            "ProjectDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project (alphanumeric)",
                        "example": "example-project"
                    },
                    "open": {
                        "type": "boolean",
                        "description": "The open status of the project"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "open"
                ]
            },
            "ScaExceptionFilterDto": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "description": "The HTTP status code of the error.",
                        "example": 400
                    },
                    "cause": {
                        "type": "object",
                        "description": "Extra information about the error."
                    },
                    "message": {
                        "type": "string",
                        "description": "The error message.",
                        "example": "Bad Request"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the request that caused the error.",
                        "example": "/api/v1/users"
                    },
                    "stack": {
                        "description": "The stack trace of the error.",
                        "example": [
                            "Error: Bad Request",
                            "    at ..."
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "statusCode",
                    "message",
                    "path"
                ]
            },
            "ProjectUpdateDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the project (alphanumeric)",
                        "example": "example-project"
                    },
                    "open": {
                        "type": "boolean",
                        "description": "The open status of the project"
                    }
                }
            },
            "ScaFieldValidationDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the field being validated."
                    },
                    "code": {
                        "enum": [
                            "not_found",
                            "not_unique",
                            "format",
                            "bad_value",
                            "invalid",
                            "required"
                        ],
                        "type": "string",
                        "description": "The code of the validation.",
                        "example": "format"
                    },
                    "message": {
                        "type": "string",
                        "description": "A message providing additional details about the validation.",
                        "example": "The email is not valid."
                    }
                },
                "required": [
                    "name",
                    "code",
                    "message"
                ]
            },
            "ScaValidationResponseDto": {
                "type": "object",
                "properties": {
                    "valid": {
                        "type": "boolean",
                        "description": "Whether the validation was successful.",
                        "example": false
                    },
                    "fields": {
                        "type": "array",
                        "description": "The list of fields that failed validation.",
                        "example": [
                            "name",
                            "email"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "invalidations": {
                        "type": "object",
                        "description": "Validation results for each field.",
                        "example": {
                            "name": {
                                "name": "name",
                                "message": "The name is already taken."
                            },
                            "email": {
                                "name": "email",
                                "message": "The email is not valid."
                            }
                        },
                        "additionalProperties": {
                            "type": "object",
                            "$ref": "#/components/schemas/ScaFieldValidationDto"
                        }
                    }
                },
                "required": [
                    "valid",
                    "fields",
                    "invalidations"
                ]
            },
            "EdgeCreateDto": {
                "type": "object",
                "properties": {
                    "test": {
                        "type": "string"
                    }
                },
                "required": [
                    "test"
                ]
            },
            "EdgeDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1234
                    },
                    "test": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "test"
                ]
            },
            "EdgeUpdateDto": {
                "type": "object",
                "properties": {
                    "test": {
                        "type": "string"
                    }
                }
            },
            "NodeCreateDto": {
                "type": "object",
                "properties": {
                    "test": {
                        "type": "string"
                    }
                },
                "required": [
                    "test"
                ]
            },
            "NodeDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1234
                    },
                    "test": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "test"
                ]
            },
            "NodeUpdateDto": {
                "type": "object",
                "properties": {
                    "test": {
                        "type": "string"
                    }
                }
            },
            "WorkspaceCreateDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the project (alphanumeric)",
                        "example": "example-project"
                    },
                    "test": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "test"
                ]
            },
            "WorkspaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project (alphanumeric)",
                        "example": "example-project"
                    },
                    "test": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "test"
                ]
            },
            "WorkspaceUpdateDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the project (alphanumeric)",
                        "example": "example-project"
                    },
                    "test": {
                        "type": "string"
                    }
                }
            },
            "SettingDto": {
                "type": "object",
                "properties": {
                    "test": {
                        "type": "string"
                    }
                },
                "required": [
                    "test"
                ]
            }
        }
    }
}