{
    "openapi": "3.0.0",
    "paths": {
        "/api/projects": {
            "post": {
                "operationId": "Projects_create",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCreateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bug, can't disable 200 response from custom decorator"
                    },
                    "201": {
                        "description": "Return a new Project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Create a new Project",
                "tags": [
                    "Projects"
                ]
            },
            "get": {
                "operationId": "Projects_paginate",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Return a list of Project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Paginate Project",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/projects/{projectId}": {
            "delete": {
                "operationId": "Projects_remove",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "The Project has been deleted"
                    },
                    "404": {
                        "description": "A Project with the specified projectId was not found"
                    }
                },
                "summary": "Delete a Project by projectId",
                "tags": [
                    "Projects"
                ]
            },
            "patch": {
                "operationId": "Projects_update",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a Project by projectId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Project with the specified projectId was not found"
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Update a Project by projectId",
                "tags": [
                    "Projects"
                ]
            },
            "get": {
                "operationId": "Projects_get",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a Project by projectId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Project with the specified projectId was not found"
                    }
                },
                "summary": "Get Project by projectId",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/projects/validates": {
            "post": {
                "operationId": "Projects_createValidate",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCreateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Validation results of ProjectCreate",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaValidationResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Validates creation of a ProjectCreate",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/projects/{projectId}/validates": {
            "patch": {
                "operationId": "Projects_updateValidate",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a ProjectUpdate",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Validation results of ProjectUpdate",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaValidationResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A ProjectUpdate with the specified projectId was not found"
                    }
                },
                "summary": "Validates updating a ProjectUpdate by projectId",
                "tags": [
                    "Projects"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/{workspaceId}/edges": {
            "post": {
                "operationId": "Edges_create",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EdgeCreateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bug, can't disable 200 response from custom decorator"
                    },
                    "201": {
                        "description": "Return a new Edge",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Create a new Edge",
                "tags": [
                    "Edges"
                ]
            },
            "get": {
                "operationId": "Edges_paginate",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a list of Edge",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Paginate Edge",
                "tags": [
                    "Edges"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/{workspaceId}/edges/{edgeId}": {
            "patch": {
                "operationId": "Edges_update",
                "parameters": [
                    {
                        "name": "edgeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Edge",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EdgeUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a Edge by edgeId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Edge with the specified edgeId was not found"
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Update a Edge by edgeId",
                "tags": [
                    "Edges"
                ]
            },
            "delete": {
                "operationId": "Edges_remove",
                "parameters": [
                    {
                        "name": "edgeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Edge",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The Edge has been deleted"
                    },
                    "404": {
                        "description": "A Edge with the specified edgeId was not found"
                    }
                },
                "summary": "Delete a Edge by edgeId",
                "tags": [
                    "Edges"
                ]
            },
            "get": {
                "operationId": "Edges_get",
                "parameters": [
                    {
                        "name": "edgeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Edge",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a Edge by edgeId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EdgeDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Edge with the specified edgeId was not found"
                    }
                },
                "summary": "Get Edge by edgeId",
                "tags": [
                    "Edges"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/{workspaceId}/nodes": {
            "post": {
                "operationId": "Nodes_create",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NodeCreateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bug, can't disable 200 response from custom decorator"
                    },
                    "201": {
                        "description": "Return a new Node",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Create a new Node",
                "tags": [
                    "Nodes"
                ]
            },
            "get": {
                "operationId": "Nodes_paginate",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a list of Node",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Paginate Node",
                "tags": [
                    "Nodes"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/{workspaceId}/nodes/{nodeId}": {
            "patch": {
                "operationId": "Nodes_update",
                "parameters": [
                    {
                        "name": "nodeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Node",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NodeUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a Node by nodeId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Node with the specified nodeId was not found"
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Update a Node by nodeId",
                "tags": [
                    "Nodes"
                ]
            },
            "delete": {
                "operationId": "Nodes_remove",
                "parameters": [
                    {
                        "name": "nodeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Node",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The Node has been deleted"
                    },
                    "404": {
                        "description": "A Node with the specified nodeId was not found"
                    }
                },
                "summary": "Delete a Node by nodeId",
                "tags": [
                    "Nodes"
                ]
            },
            "get": {
                "operationId": "Nodes_get",
                "parameters": [
                    {
                        "name": "nodeId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Node",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a workspace",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a Node by nodeId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Node with the specified nodeId was not found"
                    }
                },
                "summary": "Get Node by nodeId",
                "tags": [
                    "Nodes"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces": {
            "post": {
                "operationId": "Workspaces_create",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkspaceCreateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bug, can't disable 200 response from custom decorator"
                    },
                    "201": {
                        "description": "Return a new Workspace",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkspaceDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Create a new Workspace",
                "tags": [
                    "Workspaces"
                ]
            },
            "get": {
                "operationId": "Workspaces_paginate",
                "parameters": [
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a list of Workspace",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkspaceDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Paginate Workspace",
                "tags": [
                    "Workspaces"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/{workspaceId}": {
            "patch": {
                "operationId": "Workspaces_update",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Workspace",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkspaceUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a Workspace by workspaceId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkspaceDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "TypeORM related errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Workspace with the specified workspaceId was not found"
                    },
                    "409": {
                        "description": "TypeORM related constraint errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 409,
                                    "message": "duplicate key value violates unique constraint",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Update a Workspace by workspaceId",
                "tags": [
                    "Workspaces"
                ]
            },
            "delete": {
                "operationId": "Workspaces_remove",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Workspace",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The Workspace has been deleted"
                    },
                    "404": {
                        "description": "A Workspace with the specified workspaceId was not found"
                    }
                },
                "summary": "Delete a Workspace by workspaceId",
                "tags": [
                    "Workspaces"
                ]
            },
            "get": {
                "operationId": "Workspaces_get",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a Workspace",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "projectId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a project",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a Workspace by workspaceId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkspaceDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A Workspace with the specified workspaceId was not found"
                    }
                },
                "summary": "Get Workspace by workspaceId",
                "tags": [
                    "Workspaces"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/validates": {
            "post": {
                "operationId": "Workspaces_createValidate",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkspaceCreateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Validation results of WorkspaceCreate",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaValidationResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    }
                },
                "summary": "Validates creation of a WorkspaceCreate",
                "tags": [
                    "Workspaces"
                ]
            }
        },
        "/api/projects/{projectId}/workspaces/{workspaceId}/validates": {
            "patch": {
                "operationId": "Workspaces_updateValidate",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of a WorkspaceUpdate",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkspaceUpdateDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Validation results of WorkspaceUpdate",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaValidationResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScaExceptionFilterDto"
                                },
                                "example": {
                                    "statusCode": 400,
                                    "message": "property should not be empty",
                                    "path": "/api/v1/users"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A WorkspaceUpdate with the specified workspaceId was not found"
                    }
                },
                "summary": "Validates updating a WorkspaceUpdate by workspaceId",
                "tags": [
                    "Workspaces"
                ]
            }
        },
        "/api/app/settings": {
            "get": {
                "operationId": "Settings_get",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Get App settings",
                "tags": [
                    "App"
                ]
            },
            "put": {
                "operationId": "Settings_replace",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Replace App settings",
                "tags": [
                    "App"
                ]
            },
            "patch": {
                "operationId": "Settings_update",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingDto"
                                }
                            }
                        }
                    }
                },
                "summary": "Update App settings",
                "tags": [
                    "App"
                ]
            }
        },
        "/api/node-def/groups": {
            "get": {
                "operationId": "GrNodeDef_getNodeDefGroups",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Return a list of node definitions by groups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GrNodeDefGroupDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Get a list of node definitions by groups",
                "tags": [
                    "Graph"
                ]
            }
        }
    },
    "info": {
        "title": "AIGraphr",
        "description": "AIGraphr API",
        "version": "1.0.0",
        "contact": {}
    },
    "tags": [],
    "servers": [],
    "components": {
        "securitySchemes": {
            "bearer": {
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "type": "http"
            }
        },
        "schemas": {
            "ProjectCreateDto": {
                "type": "object",
                "properties": {
                    "encrypted": {
                        "type": "boolean",
                        "description": "The encrypted status of the project",
                        "example": false
                    },
                    "fileName": {
                        "type": "string",
                        "description": "The name of the project file (alphanumeric)",
                        "example": "example-project"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project (alphanumeric)",
                        "example": "My Project"
                    },
                    "cloneId": {
                        "type": "number",
                        "description": "The ID of the project to clone",
                        "example": 1234
                    }
                },
                "required": [
                    "encrypted",
                    "fileName",
                    "name"
                ]
            },
            "ProjectDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "The encrypted status of the project",
                        "example": false
                    },
                    "fileName": {
                        "type": "string",
                        "description": "The name of the project file (alphanumeric)",
                        "example": "example-project"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project (alphanumeric)",
                        "example": "My Project"
                    },
                    "open": {
                        "type": "boolean",
                        "description": "The open status of the project"
                    }
                },
                "required": [
                    "id",
                    "encrypted",
                    "fileName",
                    "name",
                    "open"
                ]
            },
            "ScaExceptionFilterDto": {
                "type": "object",
                "properties": {
                    "cause": {
                        "type": "object",
                        "description": "Extra information about the error."
                    },
                    "message": {
                        "type": "string",
                        "description": "The error message.",
                        "example": "Bad Request"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the request that caused the error.",
                        "example": "/api/v1/users"
                    },
                    "stack": {
                        "description": "The stack trace of the error.",
                        "example": [
                            "Error: Bad Request",
                            "    at ..."
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "statusCode": {
                        "type": "number",
                        "description": "The HTTP status code of the error.",
                        "example": 400
                    }
                },
                "required": [
                    "message",
                    "path",
                    "statusCode"
                ]
            },
            "ProjectUpdateDto": {
                "type": "object",
                "properties": {
                    "fileName": {
                        "type": "string",
                        "description": "The name of the project file (alphanumeric)",
                        "example": "example-project"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project (alphanumeric)",
                        "example": "My Project"
                    },
                    "open": {
                        "type": "boolean",
                        "description": "The open status of the project"
                    }
                }
            },
            "ScaFieldValidationDto": {
                "type": "object",
                "properties": {
                    "code": {
                        "enum": [
                            "not_found",
                            "not_unique",
                            "format",
                            "bad_value",
                            "invalid",
                            "required"
                        ],
                        "type": "string",
                        "description": "The code of the validation.",
                        "example": "format"
                    },
                    "message": {
                        "type": "string",
                        "description": "A message providing additional details about the validation.",
                        "example": "The email is not valid."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the field being validated."
                    }
                },
                "required": [
                    "code",
                    "message",
                    "name"
                ]
            },
            "ScaValidationResponseDto": {
                "type": "object",
                "properties": {
                    "fields": {
                        "type": "array",
                        "description": "The list of fields that failed validation.",
                        "example": [
                            "name",
                            "email"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "invalidations": {
                        "type": "object",
                        "description": "Validation results for each field.",
                        "example": {
                            "name": {
                                "name": "name",
                                "message": "The name is already taken."
                            },
                            "email": {
                                "name": "email",
                                "message": "The email is not valid."
                            }
                        },
                        "additionalProperties": {
                            "type": "object",
                            "$ref": "#/components/schemas/ScaFieldValidationDto"
                        }
                    },
                    "valid": {
                        "type": "boolean",
                        "description": "Whether the validation was successful.",
                        "example": false
                    }
                },
                "required": [
                    "fields",
                    "invalidations",
                    "valid"
                ]
            },
            "WorkspaceEntity": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the workspace"
                    },
                    "edges": {
                        "description": "The edges of the workspace that connect nodes",
                        "example": [
                            {
                                "id": 1,
                                "workspaceId": 1
                            }
                        ],
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EdgeEntity"
                            }
                        ]
                    },
                    "engine": {
                        "enum": [
                            "javascript",
                            "python"
                        ],
                        "type": "string",
                        "description": "The engine of the workspace"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workspace",
                        "example": "main"
                    },
                    "nodes": {
                        "description": "The nodes of the workspace",
                        "example": [
                            {
                                "id": 1,
                                "workspaceId": 1
                            }
                        ],
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NodeEntity"
                            }
                        ]
                    }
                },
                "description": "Workspaces are the top level of the project hierarchy, and contain the nodes that make up an executable graph.",
                "required": [
                    "id",
                    "engine",
                    "name"
                ]
            },
            "EdgeEntity": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "inputNode": {
                        "description": "The node that the edge connects to as an input",
                        "example": {
                            "id": 1,
                            "workspaceId": 1,
                            "inputEdges": [],
                            "outputEdges": []
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NodeEntity"
                            }
                        ]
                    },
                    "inputNodeId": {
                        "type": "number",
                        "description": "The ID of the node that the edge connects to as an input",
                        "example": 1
                    },
                    "outputNode": {
                        "description": "The node that the edge connects to as an output",
                        "example": {
                            "id": 1,
                            "workspaceId": 1,
                            "inputEdges": [],
                            "outputEdges": []
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NodeEntity"
                            }
                        ]
                    },
                    "outputNodeId": {
                        "type": "number",
                        "description": "The ID of the node that the edge connects to as an output",
                        "example": 1
                    },
                    "workspace": {
                        "description": "The workspace of the edge",
                        "example": {
                            "id": 1
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WorkspaceEntity"
                            }
                        ]
                    }
                },
                "description": "Edges connect nodes in a workspace. They are used to define the flow of data between nodes.",
                "required": [
                    "id",
                    "inputNodeId",
                    "outputNodeId"
                ]
            },
            "NodeEntity": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "inputEdges": {
                        "description": "The edges that connect to the node as inputs",
                        "example": {
                            "id": 1,
                            "inputNodeId": 1,
                            "outputNodeId": 1
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EdgeEntity"
                            }
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the node (alphanumeric)",
                        "example": "forEach1"
                    },
                    "outputEdges": {
                        "description": "The edges that connect to the node as outputs",
                        "example": {
                            "id": 1,
                            "inputNodeId": 1,
                            "outputNodeId": 1
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EdgeEntity"
                            }
                        ]
                    },
                    "type": {
                        "type": "string",
                        "description": "The namespace of the node definition"
                    },
                    "view": {
                        "type": "boolean",
                        "description": "Whether the node has a view open",
                        "example": true
                    },
                    "workspace": {
                        "description": "The workspace of the node",
                        "example": {
                            "id": 1
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WorkspaceEntity"
                            }
                        ]
                    },
                    "workspaceId": {
                        "type": "number",
                        "description": "The ID of the workspace of the node",
                        "example": 1
                    }
                },
                "description": "Nodes store the run-time data needed by Node Instances to run. They are connected by Edges to form a graph.",
                "required": [
                    "id",
                    "name",
                    "type",
                    "view",
                    "workspaceId"
                ]
            },
            "EdgeCreateDto": {
                "type": "object",
                "properties": {
                    "inputNode": {
                        "description": "The node that the edge connects to as an input",
                        "example": {
                            "id": 1,
                            "workspaceId": 1,
                            "inputEdges": [],
                            "outputEdges": []
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NodeEntity"
                            }
                        ]
                    },
                    "inputNodeId": {
                        "type": "number",
                        "description": "The ID of the node that the edge connects to as an input",
                        "example": 1
                    },
                    "outputNode": {
                        "description": "The node that the edge connects to as an output",
                        "example": {
                            "id": 1,
                            "workspaceId": 1,
                            "inputEdges": [],
                            "outputEdges": []
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NodeEntity"
                            }
                        ]
                    },
                    "outputNodeId": {
                        "type": "number",
                        "description": "The ID of the node that the edge connects to as an output",
                        "example": 1
                    },
                    "workspace": {
                        "description": "The workspace of the edge",
                        "example": {
                            "id": 1
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WorkspaceEntity"
                            }
                        ]
                    }
                },
                "required": [
                    "inputNodeId",
                    "outputNodeId"
                ]
            },
            "EdgeDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "inputNode": {
                        "description": "The node that the edge connects to as an input",
                        "example": {
                            "id": 1,
                            "workspaceId": 1,
                            "inputEdges": [],
                            "outputEdges": []
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NodeEntity"
                            }
                        ]
                    },
                    "inputNodeId": {
                        "type": "number",
                        "description": "The ID of the node that the edge connects to as an input",
                        "example": 1
                    },
                    "outputNode": {
                        "description": "The node that the edge connects to as an output",
                        "example": {
                            "id": 1,
                            "workspaceId": 1,
                            "inputEdges": [],
                            "outputEdges": []
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NodeEntity"
                            }
                        ]
                    },
                    "outputNodeId": {
                        "type": "number",
                        "description": "The ID of the node that the edge connects to as an output",
                        "example": 1
                    },
                    "workspace": {
                        "description": "The workspace of the edge",
                        "example": {
                            "id": 1
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WorkspaceEntity"
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "inputNodeId",
                    "outputNodeId"
                ]
            },
            "EdgeUpdateDto": {
                "type": "object",
                "properties": {
                    "inputNode": {
                        "description": "The node that the edge connects to as an input",
                        "example": {
                            "id": 1,
                            "workspaceId": 1,
                            "inputEdges": [],
                            "outputEdges": []
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NodeEntity"
                            }
                        ]
                    },
                    "inputNodeId": {
                        "type": "number",
                        "description": "The ID of the node that the edge connects to as an input",
                        "example": 1
                    },
                    "outputNode": {
                        "description": "The node that the edge connects to as an output",
                        "example": {
                            "id": 1,
                            "workspaceId": 1,
                            "inputEdges": [],
                            "outputEdges": []
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NodeEntity"
                            }
                        ]
                    },
                    "outputNodeId": {
                        "type": "number",
                        "description": "The ID of the node that the edge connects to as an output",
                        "example": 1
                    },
                    "workspace": {
                        "description": "The workspace of the edge",
                        "example": {
                            "id": 1
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WorkspaceEntity"
                            }
                        ]
                    }
                }
            },
            "NodeCreateDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the node (alphanumeric)",
                        "example": "forEach1"
                    },
                    "type": {
                        "type": "string",
                        "description": "The namespace of the node definition"
                    },
                    "view": {
                        "type": "boolean",
                        "description": "Whether the node has a view open",
                        "example": true
                    },
                    "workspaceId": {
                        "type": "number",
                        "description": "The ID of the workspace of the node",
                        "example": 1
                    }
                },
                "required": [
                    "name",
                    "type",
                    "view",
                    "workspaceId"
                ]
            },
            "NodeDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "inputEdges": {
                        "description": "The edges that connect to the node as inputs",
                        "example": {
                            "id": 1,
                            "inputNodeId": 1,
                            "outputNodeId": 1
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EdgeEntity"
                            }
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the node (alphanumeric)",
                        "example": "forEach1"
                    },
                    "outputEdges": {
                        "description": "The edges that connect to the node as outputs",
                        "example": {
                            "id": 1,
                            "inputNodeId": 1,
                            "outputNodeId": 1
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EdgeEntity"
                            }
                        ]
                    },
                    "type": {
                        "type": "string",
                        "description": "The namespace of the node definition"
                    },
                    "view": {
                        "type": "boolean",
                        "description": "Whether the node has a view open",
                        "example": true
                    },
                    "workspace": {
                        "description": "The workspace of the node",
                        "example": {
                            "id": 1
                        },
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WorkspaceEntity"
                            }
                        ]
                    },
                    "workspaceId": {
                        "type": "number",
                        "description": "The ID of the workspace of the node",
                        "example": 1
                    }
                },
                "required": [
                    "id",
                    "name",
                    "type",
                    "view",
                    "workspaceId"
                ]
            },
            "NodeUpdateDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the node (alphanumeric)",
                        "example": "forEach1"
                    },
                    "type": {
                        "type": "string",
                        "description": "The namespace of the node definition"
                    },
                    "view": {
                        "type": "boolean",
                        "description": "Whether the node has a view open",
                        "example": true
                    },
                    "workspaceId": {
                        "type": "number",
                        "description": "The ID of the workspace of the node",
                        "example": 1
                    }
                }
            },
            "WorkspaceCreateDto": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the workspace"
                    },
                    "engine": {
                        "enum": [
                            "javascript",
                            "python"
                        ],
                        "type": "string",
                        "description": "The engine of the workspace"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workspace",
                        "example": "main"
                    }
                },
                "required": [
                    "engine",
                    "name"
                ]
            },
            "WorkspaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the workspace"
                    },
                    "engine": {
                        "enum": [
                            "javascript",
                            "python"
                        ],
                        "type": "string",
                        "description": "The engine of the workspace"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workspace",
                        "example": "main"
                    }
                },
                "required": [
                    "id",
                    "engine",
                    "name"
                ]
            },
            "WorkspaceUpdateDto": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the workspace"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workspace",
                        "example": "main"
                    }
                }
            },
            "SettingDto": {
                "type": "object",
                "properties": {
                    "test": {
                        "type": "string"
                    }
                },
                "required": [
                    "test"
                ]
            },
            "GrNodeDefParamDto": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the parameter",
                        "example": "A number parameter"
                    },
                    "isArray": {
                        "type": "boolean",
                        "description": "Whether the parameter is an array",
                        "example": false
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the parameter",
                        "example": "count"
                    },
                    "type": {
                        "enum": [
                            "userType",
                            "string",
                            "number",
                            "boolean",
                            "object"
                        ],
                        "type": "string",
                        "description": "The type of the parameter",
                        "example": "number"
                    }
                },
                "description": "A parameter of a node. It is used to generate the UI for the node.",
                "required": [
                    "description",
                    "isArray",
                    "name",
                    "type"
                ]
            },
            "GrNodeDefDto": {
                "type": "object",
                "properties": {
                    "deprecated": {
                        "type": "boolean",
                        "description": "Whether the node is deprecated",
                        "example": false
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the node",
                        "example": "Iterates over a list of items"
                    },
                    "group": {
                        "type": "string",
                        "description": "The group of the node",
                        "example": "core"
                    },
                    "icon": {
                        "enum": [
                            "core",
                            "custom",
                            "file",
                            "image",
                            "math",
                            "network",
                            "other",
                            "social",
                            "text",
                            "time",
                            "web"
                        ],
                        "type": "string",
                        "description": "The icon of the node",
                        "example": "core"
                    },
                    "inputs": {
                        "description": "The inputs of the node",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GrNodeDefParamDto"
                        }
                    },
                    "outputs": {
                        "description": "The outputs of the node",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GrNodeDefParamDto"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "The unique type of the node",
                        "example": "forEach"
                    },
                    "version": {
                        "type": "number",
                        "description": "The version of the node",
                        "example": 1
                    }
                },
                "description": "Describes how nodes are structured. It is used to generate the UI for the node.",
                "required": [
                    "description",
                    "group",
                    "icon",
                    "inputs",
                    "outputs",
                    "type",
                    "version"
                ]
            },
            "GrNodeDefGroupDto": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the group",
                        "example": "Core nodes"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group",
                        "example": "core"
                    },
                    "nodes": {
                        "description": "The nodes in the group",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GrNodeDefDto"
                        }
                    }
                },
                "description": "Describes how nodes are structured. It is used to generate the UI for the node.",
                "required": [
                    "description",
                    "name",
                    "nodes"
                ]
            }
        }
    }
}